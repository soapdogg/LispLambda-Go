// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/tokenizer"
	"sync"
)

type FakeTokenizer struct {
	TokenizeStub        func(string) []string
	tokenizeMutex       sync.RWMutex
	tokenizeArgsForCall []struct {
		arg1 string
	}
	tokenizeReturns struct {
		result1 []string
	}
	tokenizeReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenizer) Tokenize(arg1 string) []string {
	fake.tokenizeMutex.Lock()
	ret, specificReturn := fake.tokenizeReturnsOnCall[len(fake.tokenizeArgsForCall)]
	fake.tokenizeArgsForCall = append(fake.tokenizeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.TokenizeStub
	fakeReturns := fake.tokenizeReturns
	fake.recordInvocation("Tokenize", []interface{}{arg1})
	fake.tokenizeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTokenizer) TokenizeCallCount() int {
	fake.tokenizeMutex.RLock()
	defer fake.tokenizeMutex.RUnlock()
	return len(fake.tokenizeArgsForCall)
}

func (fake *FakeTokenizer) TokenizeCalls(stub func(string) []string) {
	fake.tokenizeMutex.Lock()
	defer fake.tokenizeMutex.Unlock()
	fake.TokenizeStub = stub
}

func (fake *FakeTokenizer) TokenizeArgsForCall(i int) string {
	fake.tokenizeMutex.RLock()
	defer fake.tokenizeMutex.RUnlock()
	argsForCall := fake.tokenizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenizer) TokenizeReturns(result1 []string) {
	fake.tokenizeMutex.Lock()
	defer fake.tokenizeMutex.Unlock()
	fake.TokenizeStub = nil
	fake.tokenizeReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTokenizer) TokenizeReturnsOnCall(i int, result1 []string) {
	fake.tokenizeMutex.Lock()
	defer fake.tokenizeMutex.Unlock()
	fake.TokenizeStub = nil
	if fake.tokenizeReturnsOnCall == nil {
		fake.tokenizeReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.tokenizeReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTokenizer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tokenizeMutex.RLock()
	defer fake.tokenizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenizer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tokenizer.Tokenizer = new(FakeTokenizer)
