// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/parser/internal"
	"sync"
)

type FakeNodeParser struct {
	ParseIntoNodeStub        func([]string) datamodels.Node
	parseIntoNodeMutex       sync.RWMutex
	parseIntoNodeArgsForCall []struct {
		arg1 []string
	}
	parseIntoNodeReturns struct {
		result1 datamodels.Node
	}
	parseIntoNodeReturnsOnCall map[int]struct {
		result1 datamodels.Node
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeParser) ParseIntoNode(arg1 []string) datamodels.Node {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.parseIntoNodeMutex.Lock()
	ret, specificReturn := fake.parseIntoNodeReturnsOnCall[len(fake.parseIntoNodeArgsForCall)]
	fake.parseIntoNodeArgsForCall = append(fake.parseIntoNodeArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.ParseIntoNodeStub
	fakeReturns := fake.parseIntoNodeReturns
	fake.recordInvocation("ParseIntoNode", []interface{}{arg1Copy})
	fake.parseIntoNodeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodeParser) ParseIntoNodeCallCount() int {
	fake.parseIntoNodeMutex.RLock()
	defer fake.parseIntoNodeMutex.RUnlock()
	return len(fake.parseIntoNodeArgsForCall)
}

func (fake *FakeNodeParser) ParseIntoNodeCalls(stub func([]string) datamodels.Node) {
	fake.parseIntoNodeMutex.Lock()
	defer fake.parseIntoNodeMutex.Unlock()
	fake.ParseIntoNodeStub = stub
}

func (fake *FakeNodeParser) ParseIntoNodeArgsForCall(i int) []string {
	fake.parseIntoNodeMutex.RLock()
	defer fake.parseIntoNodeMutex.RUnlock()
	argsForCall := fake.parseIntoNodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeParser) ParseIntoNodeReturns(result1 datamodels.Node) {
	fake.parseIntoNodeMutex.Lock()
	defer fake.parseIntoNodeMutex.Unlock()
	fake.ParseIntoNodeStub = nil
	fake.parseIntoNodeReturns = struct {
		result1 datamodels.Node
	}{result1}
}

func (fake *FakeNodeParser) ParseIntoNodeReturnsOnCall(i int, result1 datamodels.Node) {
	fake.parseIntoNodeMutex.Lock()
	defer fake.parseIntoNodeMutex.Unlock()
	fake.ParseIntoNodeStub = nil
	if fake.parseIntoNodeReturnsOnCall == nil {
		fake.parseIntoNodeReturnsOnCall = make(map[int]struct {
			result1 datamodels.Node
		})
	}
	fake.parseIntoNodeReturnsOnCall[i] = struct {
		result1 datamodels.Node
	}{result1}
}

func (fake *FakeNodeParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseIntoNodeMutex.RLock()
	defer fake.parseIntoNodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.NodeParser = new(FakeNodeParser)
