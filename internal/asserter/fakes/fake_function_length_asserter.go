// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/asserter"
	"lisp_lambda-go/internal/core/datamodels"
	"sync"
)

type FakeFunctionLengthAsserter struct {
	AssertLengthIsAsExpectedStub        func(string, int, datamodels.Node) error
	assertLengthIsAsExpectedMutex       sync.RWMutex
	assertLengthIsAsExpectedArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 datamodels.Node
	}
	assertLengthIsAsExpectedReturns struct {
		result1 error
	}
	assertLengthIsAsExpectedReturnsOnCall map[int]struct {
		result1 error
	}
	AssertLengthIsAtLeastMinimumStub        func(string, int, datamodels.Node) error
	assertLengthIsAtLeastMinimumMutex       sync.RWMutex
	assertLengthIsAtLeastMinimumArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 datamodels.Node
	}
	assertLengthIsAtLeastMinimumReturns struct {
		result1 error
	}
	assertLengthIsAtLeastMinimumReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAsExpected(arg1 string, arg2 int, arg3 datamodels.Node) error {
	fake.assertLengthIsAsExpectedMutex.Lock()
	ret, specificReturn := fake.assertLengthIsAsExpectedReturnsOnCall[len(fake.assertLengthIsAsExpectedArgsForCall)]
	fake.assertLengthIsAsExpectedArgsForCall = append(fake.assertLengthIsAsExpectedArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 datamodels.Node
	}{arg1, arg2, arg3})
	stub := fake.AssertLengthIsAsExpectedStub
	fakeReturns := fake.assertLengthIsAsExpectedReturns
	fake.recordInvocation("AssertLengthIsAsExpected", []interface{}{arg1, arg2, arg3})
	fake.assertLengthIsAsExpectedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAsExpectedCallCount() int {
	fake.assertLengthIsAsExpectedMutex.RLock()
	defer fake.assertLengthIsAsExpectedMutex.RUnlock()
	return len(fake.assertLengthIsAsExpectedArgsForCall)
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAsExpectedCalls(stub func(string, int, datamodels.Node) error) {
	fake.assertLengthIsAsExpectedMutex.Lock()
	defer fake.assertLengthIsAsExpectedMutex.Unlock()
	fake.AssertLengthIsAsExpectedStub = stub
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAsExpectedArgsForCall(i int) (string, int, datamodels.Node) {
	fake.assertLengthIsAsExpectedMutex.RLock()
	defer fake.assertLengthIsAsExpectedMutex.RUnlock()
	argsForCall := fake.assertLengthIsAsExpectedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAsExpectedReturns(result1 error) {
	fake.assertLengthIsAsExpectedMutex.Lock()
	defer fake.assertLengthIsAsExpectedMutex.Unlock()
	fake.AssertLengthIsAsExpectedStub = nil
	fake.assertLengthIsAsExpectedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAsExpectedReturnsOnCall(i int, result1 error) {
	fake.assertLengthIsAsExpectedMutex.Lock()
	defer fake.assertLengthIsAsExpectedMutex.Unlock()
	fake.AssertLengthIsAsExpectedStub = nil
	if fake.assertLengthIsAsExpectedReturnsOnCall == nil {
		fake.assertLengthIsAsExpectedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assertLengthIsAsExpectedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAtLeastMinimum(arg1 string, arg2 int, arg3 datamodels.Node) error {
	fake.assertLengthIsAtLeastMinimumMutex.Lock()
	ret, specificReturn := fake.assertLengthIsAtLeastMinimumReturnsOnCall[len(fake.assertLengthIsAtLeastMinimumArgsForCall)]
	fake.assertLengthIsAtLeastMinimumArgsForCall = append(fake.assertLengthIsAtLeastMinimumArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 datamodels.Node
	}{arg1, arg2, arg3})
	stub := fake.AssertLengthIsAtLeastMinimumStub
	fakeReturns := fake.assertLengthIsAtLeastMinimumReturns
	fake.recordInvocation("AssertLengthIsAtLeastMinimum", []interface{}{arg1, arg2, arg3})
	fake.assertLengthIsAtLeastMinimumMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAtLeastMinimumCallCount() int {
	fake.assertLengthIsAtLeastMinimumMutex.RLock()
	defer fake.assertLengthIsAtLeastMinimumMutex.RUnlock()
	return len(fake.assertLengthIsAtLeastMinimumArgsForCall)
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAtLeastMinimumCalls(stub func(string, int, datamodels.Node) error) {
	fake.assertLengthIsAtLeastMinimumMutex.Lock()
	defer fake.assertLengthIsAtLeastMinimumMutex.Unlock()
	fake.AssertLengthIsAtLeastMinimumStub = stub
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAtLeastMinimumArgsForCall(i int) (string, int, datamodels.Node) {
	fake.assertLengthIsAtLeastMinimumMutex.RLock()
	defer fake.assertLengthIsAtLeastMinimumMutex.RUnlock()
	argsForCall := fake.assertLengthIsAtLeastMinimumArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAtLeastMinimumReturns(result1 error) {
	fake.assertLengthIsAtLeastMinimumMutex.Lock()
	defer fake.assertLengthIsAtLeastMinimumMutex.Unlock()
	fake.AssertLengthIsAtLeastMinimumStub = nil
	fake.assertLengthIsAtLeastMinimumReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFunctionLengthAsserter) AssertLengthIsAtLeastMinimumReturnsOnCall(i int, result1 error) {
	fake.assertLengthIsAtLeastMinimumMutex.Lock()
	defer fake.assertLengthIsAtLeastMinimumMutex.Unlock()
	fake.AssertLengthIsAtLeastMinimumStub = nil
	if fake.assertLengthIsAtLeastMinimumReturnsOnCall == nil {
		fake.assertLengthIsAtLeastMinimumReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assertLengthIsAtLeastMinimumReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFunctionLengthAsserter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assertLengthIsAsExpectedMutex.RLock()
	defer fake.assertLengthIsAsExpectedMutex.RUnlock()
	fake.assertLengthIsAtLeastMinimumMutex.RLock()
	defer fake.assertLengthIsAtLeastMinimumMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFunctionLengthAsserter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ asserter.FunctionLengthAsserter = new(FakeFunctionLengthAsserter)
