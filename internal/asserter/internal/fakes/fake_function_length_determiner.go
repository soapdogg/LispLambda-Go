// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/asserter/internal"
	"lisp_lambda-go/internal/core/datamodels"
	"sync"
)

type FakeFunctionLengthDeterminer struct {
	DetermineFunctionLengthStub        func(datamodels.Node) int
	determineFunctionLengthMutex       sync.RWMutex
	determineFunctionLengthArgsForCall []struct {
		arg1 datamodels.Node
	}
	determineFunctionLengthReturns struct {
		result1 int
	}
	determineFunctionLengthReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFunctionLengthDeterminer) DetermineFunctionLength(arg1 datamodels.Node) int {
	fake.determineFunctionLengthMutex.Lock()
	ret, specificReturn := fake.determineFunctionLengthReturnsOnCall[len(fake.determineFunctionLengthArgsForCall)]
	fake.determineFunctionLengthArgsForCall = append(fake.determineFunctionLengthArgsForCall, struct {
		arg1 datamodels.Node
	}{arg1})
	stub := fake.DetermineFunctionLengthStub
	fakeReturns := fake.determineFunctionLengthReturns
	fake.recordInvocation("DetermineFunctionLength", []interface{}{arg1})
	fake.determineFunctionLengthMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFunctionLengthDeterminer) DetermineFunctionLengthCallCount() int {
	fake.determineFunctionLengthMutex.RLock()
	defer fake.determineFunctionLengthMutex.RUnlock()
	return len(fake.determineFunctionLengthArgsForCall)
}

func (fake *FakeFunctionLengthDeterminer) DetermineFunctionLengthCalls(stub func(datamodels.Node) int) {
	fake.determineFunctionLengthMutex.Lock()
	defer fake.determineFunctionLengthMutex.Unlock()
	fake.DetermineFunctionLengthStub = stub
}

func (fake *FakeFunctionLengthDeterminer) DetermineFunctionLengthArgsForCall(i int) datamodels.Node {
	fake.determineFunctionLengthMutex.RLock()
	defer fake.determineFunctionLengthMutex.RUnlock()
	argsForCall := fake.determineFunctionLengthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFunctionLengthDeterminer) DetermineFunctionLengthReturns(result1 int) {
	fake.determineFunctionLengthMutex.Lock()
	defer fake.determineFunctionLengthMutex.Unlock()
	fake.DetermineFunctionLengthStub = nil
	fake.determineFunctionLengthReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeFunctionLengthDeterminer) DetermineFunctionLengthReturnsOnCall(i int, result1 int) {
	fake.determineFunctionLengthMutex.Lock()
	defer fake.determineFunctionLengthMutex.Unlock()
	fake.DetermineFunctionLengthStub = nil
	if fake.determineFunctionLengthReturnsOnCall == nil {
		fake.determineFunctionLengthReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.determineFunctionLengthReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeFunctionLengthDeterminer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.determineFunctionLengthMutex.RLock()
	defer fake.determineFunctionLengthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFunctionLengthDeterminer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.FunctionLengthDeterminer = new(FakeFunctionLengthDeterminer)
