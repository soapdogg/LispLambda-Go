package internal

import (
	"github.com/stretchr/testify/assert"
	asserterImpl "lisp_lambda-go/internal/asserter/impl"
	evaluatorImpl "lisp_lambda-go/internal/evaluator/impl"
	functionImpl "lisp_lambda-go/internal/function/impl"
	interpreterImpl "lisp_lambda-go/internal/interpreter/impl"
	parserImpl "lisp_lambda-go/internal/parser/impl"
	printerImpl "lisp_lambda-go/internal/printer/impl"
	tokenizerImpl "lisp_lambda-go/internal/tokenizer/impl"
	userDefinedImpl "lisp_lambda-go/internal/userdefined/impl"
	"testing"
)

const (
	userDefinedDiffMethod = "(defun diff (X Y) (cond ((= X Y) NIL) (T T)))"
	userDefinedNegateMethod = "(defun negate (X) (* X (- 0 1)))"
	userDefinedOneMethod = "(defun one () 1)"
	userDefinedIncrementMethod = "(defun increment (X) (+ X 1))"
	userDefinedFactorialMethod = "(defun factorial (X) (cond ((< X 1) 1) (T (* X (factorial (- X 1))))))"
	userDefinedGetValMethod = "(defun getval (X Z)(cond((= X (car (car Z)))(cdr (car Z)))(T (getval X (cdr Z)))))"
	userDefinedDynamicScopeMethod = "(defun F (X) (+ X Y))(defun G (Y) (F 10))(defun H (Y) (F 20))"
	userDefinedBoundMethod = "(defun bound (X Y)(cond((null X) NIL)((null Y) NIL) ((atom Y) NIL ) ((= X (car (car Y))) T )(T(bound X (cdr Y)))))"
	userDefinedAddPairsMethod = "(defun addpairs (X Y Z) (cond ((null Y) Z ) ((atom X) Z) ((null(atom(car X))) Z) ((atom Y) Z) ((null X) Z) (T (cons (cons (car X) (car Y)) (addpairs (cdr X) (cdr Y) Z)))))"
	userDefinedUniMethod = "(defun uni (S1 S2) (cond ((null S1) S2)((null S2) S1) (T (cond ((mem (car S1) S2)(uni (cdr S1) S2))(T(cons (car S1) (uni (cdr S1) S2)))))))"
	userDefinedMemMethod = "(defun mem (X LIST)(cond((null LIST) NIL)(T (cond((= X (car LIST)) T)(T (mem X (cdr LIST)))))))"
	memLargeInput = "(mem 1769186959 ('(638928664 866865829 943614254 2118704985 767065259 1406788301 1558609394 104580909 1209608462 375048013 716917667 1953588585 340338025 475172209 1473722099 952310247 1343537457 421644297 667346670 1022283205 526245490 826400878 685754862 661522012 969173234 1588715399 432695549 1546947853 2120597339 632894713 2082749798 1860050843 934852350 824856674 270246224 1982551911 1888596445 951024099 1687131584 1347526942 1702515765 579322838 1493239891 443976482 775319407 1892102557 929584690 63312540 505290565 122611216 1782668065 1322692534 472812878 1346478373 1271474862 1011277100 852341670 761486344 489884760 637285517 642897696 1108108159 444431118 590991949 1486572014 768539833 738200951 1208113530 1229195325 993393230 1871695601 2049555369 1703482376 1437979703 2142264882 492842211 1605717558 2135834314 151292035 680274187 1833458881 226188530 821698929 698812460 1924891447 1084395821 380815138 628958445 1256680311 780287763 759078061 796040929 1955550491 631727154 815526157 1485052179 619246961 697022481 134740380 478096867 1880334734 1170953323 1749342693 950626571 272368030 1965872271 911476722 226974767 315675513 492682484 870765130 4563432 506167172 1422632292 205278606 1172419666 754707790 1029979345 394233543 1005554261 201690558 1491032419 266239586 74134997 1203545603 1059589864 292192427 2098691285 638875600 699070573 280187259 1205933608 171240445 2120896417 391771784 717941529 1275133398 1536879180 456760046 1708291082 1607331348 154200297 2073180745 1845796831 1757084001 1766062237 1742820926 1313308582 308396928 694618246 1520429947 345171318 423221468 1755461959 1032727656 282317108 450558781 781274998 1887465834 213536087 33280021 1938834047 810766755 945260966 2047609854 600568377 1977099309 1816100297 1974379605 532512326 1347522989 2115043308 383813405 1448478635 44065631 545481084 2015390240 2017487424 60834209 238861374 259943805 47579349 285324034 575606859 485166831 1256663279 1577212939 10871464 1866202421 417250000 910406739 1985455174 1128382803 735373767 722741511 2048849930 1987482723 1761889042 301663212 145005244 409868918 930858338 1854426258 1219758766 632293292 717494489 1552236187 899413893 1578281997 126465449 308822091 1776868299 480153274 1939202482 721443 341997131 1293782836 255159582 1078194792 784776426 1899889427 590287106 643372151 759709542 873039399 568144876 857194789 1130258797 502136793 190937431 2033179413 901015438 1880715865 2136796444 1162303239 281449094 1836031791 900978675 1279102590 1824141054 1507163025 1740699015 806277705 1523083394 468732348 403499585 1829629763 623617893 1869724990 84539225 2081955401 1990026447 1194427746 181192856 1806232061 110232772 522558845 1797048646 479317707 622094159 2113724321 991783232 1959585426 1305657229 556667727 767078364 427330334 1730921794 1784268850 2079185280 1032118251 816579295 261930472 841347152 268021135 1567850245 1222900379 606213722 876799547 1768639250 1764883274 1131639054 996718870 10412769 1441769360 1112166602 1808652619 2112266094 1278291640 1894871674 439117985 2071345638 1716585665 1364800457 753983078 1250023447 1329454506 96327466 1114513657 1948214918 1335975224 289096610 1598172633 966867772 800931107 1047579886 995305933 1429235600 2111356793 1421194775 566932329 803077502 100906144 930719199 424053742 1855593523 401028430 1919619266 1521055746 1522042900 1431255011 45920273 727661041 263535873 1543851697 1089421914 809411208 1385295913 604780212 1885037283 898299697 987138152 514157669 827462544 1069616386 823174100 1684793007 233889588 1639605116 714967126 553382448 545329741 2102902682 555639757 372942063 1291546158 867344741 1848954092 557540322 700242791 129148265 342705840 1228123117 1674436909 1397064100 557556696 970578746 400479549 438126843 1427122167 1431418808 838406928 1005795609 1483377280 1043778781 1404469597 1626645016 795655553 1583582350 1717679246 404560621 1364603815 1189770267 1431787439 190859676 1048304772 1073724672 1395138602 1610181883 641144116 771350266 342828907 1189434849 691571260 1063398503 293573242 1674100942 1208154885 1017446312 1141815042 823788055 1195344944 1356862448 1137619167 966187652 1904198252 52097033 641906007 380630458 343365473 872333544 1089663978 1572671140 2105421410 484659198 227143316 283456504 729217129 1314266486 2065942529 667886827 818947060 104740122 438229304 1627415079 193513636 1384497588 371201298 1051946375 1646547217 589672466 580719013 258718801 147287037 477278029 516791694 13894545 277971924 157780513 56324114 1576951476 1627042736 31376020 1535232202 275956542 1464685569 868696203 1295527532 439859554 1367876318 1775557260 1991919074 1244555639 1739871469 53645417 854065588 370959681 1557999490 1685546775 845963532 1233406692 1311042881 189855798 1380913448 976832862 1835380237 423406165 310370582 2058062273 1349432068 1643074180 642065710 788765806 512515553 2049251656 1148782349 1419986907 2096537487 2085596982 1285750745 918463938 1467728903 1498548780 1644044928 1649926440 1917682124 1944830057 1698297530 1347871701 719341924 320430237 736458849 249216351 1486605085 1025003166 1018171191 37863884 1701668579 961854171 239279570 920163660 453232790 1389502789 617260882 483610447 940641167 1298022142 2031299248 28000776 576893377 384804170 1542502488 306307561 2122931488 150412125 224222967 1849966063 1306619466 318169437 1931935884 229346821 2074781723 304124305 326594757 903329379 1487645471 1800857825 1689757454 1129685230 2063051082 977959304 276579262 52949219 344430400 725039344 1756785534 873129922 1284939612 529865817 549778184 1815371771 1649574274 1987995054 260901983 357742209 1621996409 1761524522 805630930 53866722 1165121194 1560563418 1005684782 473112528 182421820 828224185 775802328 1303985756 1926132008 1977050672 368436754 1705006664 793963705 781626744 585322770 1941315652 962181803 1916109254 589164782 20841162 559489709 1380741561 1674518585 1228835528 666801224 1923739985 982210930 601346091 1974748745 866381916 583741748 245205663 779455089 1712333334 1007675399 272761929 2089248905 976703014 820790526 1256763131 1963966747 254896933 1448309317 1699352925 812024945 242940512 1782111779 74453103 676748407 518281927 560538959 418507991 1714409992 843810402 623980827 800525211 1966199068 1079469178 662516562 464580480 35481133 1204138999 1801850707 673385493 813872309 974552622 9782441 571217457 331892726 939985977 1524403939 1201001429 1318615771 1862040249 1468294082 1332407085 421965166 2146130850 1563318631 780901062 30913946 1959858334 257919757 352502096 1786158628 294696391 1520135884 67801170 498956772 937731005 166022591 873881677 367432123 97104276 140508162 348872854 1345905754 139070505 164728242 1776594304 1560594784 1340353408 698981837 1194361685 1366189323 2081028206 1011173421 1144070233 1888732411 637604459 1492380824 896631068 889979233 616022233 1645295230 591103817 1342284914 2066128725 616591539 1582246457 1855879912 923784056 447909578 2044087723 1349719054 1968333100 575014598 205977796 1760898166 452406900 1692033116 1332177888 1147212006 1310558874 1352291346 353378712 1131280356 352231543 369803930 1888977924 1468990232 219457933 1301985537 380228149 682683436 1647560366 936244050 1228414375 672713912 2138270673 1139124038 1907991834 1199301597 789908403 1315453633 1074295971 2042981739 859166618 760814070 1235410192 154381697 1261674375 1117611561 510708421 778037993 1206760279 206686445 1317755465 1592392234 1763806695 796912567 872359734 893112817 1448903319 1603234628 919855646 1712464605 1149636690 1107998429 127005513 1088918590 1570261315 1158099419 191061951 129340247 270800067 142032030 552334337 709836449 923276263 2080680180 2131426299 1856875103 98787607 653238810 1568328079 207636635 1206375195 1571019103 1719620226 1070467888 1129076659 1834490279 1434816890 2010161875 1312230196 1935103569 522185237 691313721 1576233212 900915362 1101698235 421207055 1675527882 840800009 25879708 725073455 502515945 801131226 2113977117 1499339843 1794887654 1226648637 2015505664 1603877562 173481842 2089023909 1820445094 1135609496 1984672609 2126707689 1877273295 2136185464 2108184711 1463992950 2118241140 1910416619 2012746447 861689451 1058101801 215603681 493062234 1229466741 1804369586 160349361 294061254 2059808645 783211498 1270566655 1221991825 1385474003 843671310 1208139084 37033851 1502211270 58746576 1024039001 1816750360 307967753 1789218806 734342806 1141965122 1477819712 2034555923 994913815 752220558 2114267995 1091552367 464793301 309978904 38524707 1696563316 1625122227 1525727106 516725695 654758514 2005951204 143633915 308717331 743418170 2022551032 186580585 540067145 1890125266 202582376 796592640 5780773 945253674 115262302 886608217 939916676 285353091 1303111720 342360556 1511325586 931951108 1820060144 1914095514 2026433860 1705476138 1443263382 401957477 1479409086 536578669 954998139 182042433 764373012 1409741210 245087035 639022006 980922326 48064380 464616979 267225678 1898824841 1198809808 1649854450 1496513684 1180189685 584972146 1049791264 1814256017 1228766350 1047997379 1874995830 1692229989 994680560 1702768836 755189945 235396027 2106300470 1587116839 1004801626 1413091835 1888789845 1888949589 183803698 239201158 1702039732 1671202388 921723705 974417887 1012816275 30090245 1050938229 1635226789 1485282645 1358140711 1148735916 1692447030 133714466 584955654 1356731651 22004880 1518714725 276821406 497350726 1535393383 1434083478 1965834433 1097204872 618803469 826430637 114078525 1061890746 1890440537 576526249 1212755388 311736161 1400194691 708796358 1537039972 89395373 1821063543 794626720 271218135 1548941907 1198457197 1742741987 1321064638 2116970538 1062140235 655999263 500001733 1813133849 762178401 890061568 233737184 304366634 1383236707 1808797121 46859487 967040951 1988882590 224344906 245610678 737652194 1128346967 1434174316 729083244 940404244 1666528590 1781742639 1198412146 54687071 544966246 1343612424 1482854013 558557034 606503430 247060632 1107253213 685612793 1838664626 458952062 565659537 709991542 1441092546 1342592559 431095704 1094838123 1872808331 1263971706 1155404525 682131101 154025749 1155236576 1604278690 594797901 433197036 692584313 578810940 1251777752 1718030369 394248503 570975297 420552536 1571900411 944700931 434548648 558421767 423264117 1508183989 841303157 1918063619 144502479 1823091449 1364166427 855422121 567736195 1506045842 400568759 1378153587 1052399853 534010252 2142919139 1830050633 942706286 108433449 847475938 743385643 1490316978 1407681920 675413547 2094078653 1389773991 1844939654 1362126657 357487418 813811446 1567791877 890008436 66209163 844444716 1371174849 162389969 1524935834 335737469 742587075 249399391 438336677 799050022 913244393 993811893 1673626954 530127125 1998893482 801376587 1281362674 1074722457 1918227661 2044903291 144182788 1291049583 1787530262 599196969 1671251262 235944115 1136157968 1803316693 398979438 1285474868 2004779476 669167950 1593460822 1601198556 1923720196 331400558 1986420936 190070266 175017152 251578447 11818496 782080041 1611159229 2015493780 1401324858 1116615731 399217013 312173658 56006039 894776212 1832053745 128639337 587023418 260368707 315028495 1539226999 601564438 1264090518 628970413 200830249 605397703 672304832 228916087 1174503637 1771749196 1515695247 1265921452 1969607612 2008191339 2041253745 739543759 326342063 2074578298 1423622661 688103388 66073874 593413565 2081061614 1063569793 646733925 1155813901 1502351206 1952125616 218741733 1753497193 1416184452 2088557202 110133375 1913926907 1990864986 1447035056 2116393169 53048797 241318038 904254226 1930581477 58643846 84812791 1896937450 669425949 1511754976 440405179 127955292 1356298199 1389090250 712883580 1183691145 1589676486 530503829 1544960794 301889265 408481608 2065472527 1513565473 778688894 1302108804 404934458 629748370 459295868 1577445657 1147024195 1738088583 1535052896 2042093224 998800554 3172117 567990013 738110679 950300558 1364412025 1477799737 798537910 2103450190 1898862110 1580472583 1426170418 682061714 1122633180 26846894 41026885 503892287 1535294650 533907689 595579971 966729378 964959940 1243184477 731864280 1536740560 2099780193 1552821189 41014589 1898972796 290862616 192080956 1926206878 175492391 1890645988 120836198 208894758 287913599 1446822250 1739694310 155774495 338264958 49190326 389005430 1441514161 1932219505 643412229 52491388 1584478511 866006270 2066185285 1141142374 1940681929 1011591980 593732612 125911270 1632474660 982810104 1103767206 848541183 242206976 81802129 1913091446 2055724534 171650377 305554757 1493581424 2124216811 1791102392 2115135849 1700172333 1347557165 706067862 1397875922 1644971397 1589614902 405450656 2041929279 51180679 1707057716 865629204 1758957403 219589274 1540856921 156651224 1410388865 1402119169 1988682011 1848727972 945889268 1130845426 65332338 1718620648 156905152 985619749 182537594 602915955 347685668 1110934952 1548553197 1491124035 184069469 1601820894 666386463 864445486 303433151 467274867 1006173265 1534512346 1632859901 1551834065 105853409 348640104 929300683 171183492 161750549 330339333 978456039 1852316112 626746081 1090037574 1045977496 319603918 220519138 1097741991 20268799 33175089 810395520 1905530436 1564080873 688996032 1106982442 688721628 1340897342 1854097744 890512065 1037584910 1068284026 1256787263 181304601 1305016863 1954808668 1452769614 212994923 1269234813 1808079897 2072054877 1048549795 365318693 450358579 1852664201 1828576024 2017845165 1470341193 907395583 2070297741 1389511993 550549309 1946248177 939868149 1169842763 1892886311 434064938 702815762 1313479100 2075819084 1351559031 1868605595 1267227763 1352533858 160984677 2101541564 778668439 181189939 1088641251 109284995 743560274 1296033084 327998344 1445146149 1099016583 378461830 1539097526 1689980087 626076992 1811706861 501720563 1900820826 318061283 1250898583 633449945 1998036751 1317664400 16062702 2138511211 883285178 170795569 1791087331 67849257 2044445176 2056098475 1422925047 256059241 753730753 1583973957 2131478308 1550988381 1517802053 173675113 1214517328 941203500 482100362 1408060379 1478995985 799156117 521000762 495793589 1776243175 748000431 1453772444 1379461634 1035351434 1940614039 204194839 19544343 838453702 2117772922 95907318 565856760 1524859552 1459093172 1396386685 341310481 12056817 402091952 87829876 1745670210 1484779569 1091057991 1981804110 1607690113 1610139563 1707224470 458461957 474727452 778233402 2062877353 1272869763 1926277808 1586161384 1240400269 1927432837 247252693 462775295 1496236355 934780870 683630793 1450364420 1642019239 638090865 1204895656 2068202298 715158236 383102634 1850062394 1803776768 1706470706 1098369520 966832424 1283347703 477336830 379563537 230520114 1484460267 606522550 1831409087 1693523046 469418851 1832146350 321944490 216310853 653495888 1752137931 1831744907 1157139549 1935461370 1217888318 2017370258 2142181120 469349193 1910483310 754779209 1555457027 677703890 573688456 796440514 858266515 1185168922 623803793 1251263060 922353209 1298552231 792823680 810461327 1649523346 1602950991 744842400 2069685147 1197494186 496383325 447492704 748786797 775100158 1399729084 1302979963 1772527989 180810261 464270201 2084271341 1456635396 1540612869 1412803810 788731867 1565660552 274729147 1298671028 1171221779 54721436 2008944480 916569727 44972621 239400615 512296556 1070663476 510846619 2099901890 684355620 17517051 761214382 1622956111 549476405 478585981 264275771 1261966275 1241584381 1542722313 736535323 1684057247 406880447 899415194 1142349076 1242632981 1567720574 681619887 1896826911 400023239 1567376509 1376557848 1583212360 859540014 221590563 1154584006 278940088 471852295 87284776 1681911075 1791349729 277981623 1207643859 343371101 133467871 1927666635 52562444 535721691 902909158 1313851255 820259292 227136691 1611663662 815434149 1980317494 42273733 1779032905 1395087971 1148030248 1916410736 209507638 372535161 1307325601 191124009 1290298791 1661909598 1132686034 1740951189 486012324 1960451471 1480552809 1855457216 415994258 1408772772 279308793 470631763 1540526770 1693539729 907120497 1549124915 1713844047 610471176 108654354 2017653038 604323188 1846482814 515299268 1350052107 909094748 1131829762 405774683 1642449040 1645898596 1066362609 1546593616 1651686387 1550546408 1051031329 1077909946 1273053799 1998794404 585386851 543881698 2028409197 415482185 1237037111 1790276409 1460727455 279378228 1207590510 1746755976 808663462 779929577 1529275056 950874421 567056468 1692794236 1694874783 1479090611 1994059584 99744876 291129540 602495562 1754927422 1541419592 1674320482 1059534472 1308537935 1696058532 1136130561 1250104123 730362416 1440193646 987538278 434139227 164327543 954405213 1691524370 705590220 2136303255 2057028435 1743887928 307514265 1266942538 608711 509810605 942014953 1347971479 2088785231 156131486 1003586051 1906681975 2124523378 1355606303 1819919788 1716789134 585898801 1268527681 1743257145 716551019 659459758 35294201 1600083644 520373991 1949543895 1658227507 2102957246 726807220 1078176164 749671752 799876677 644173709 843324333 202499576 1283650921 296306757 896654492 1686609257 637451278 1824953653 977789886 433930278 1304384577 823957731 1577743371 1477595664 103910453 220739372 450855130 450277587 1586508953 478402185 445997214 1919268974 1810199017 714014849 1102097342 2035823433 81387208 831679360 1438519212 883523258 1272881611 1253601453 29375448 1202638260 1140599267 195715465 319555882 1092246322 1788227775 711888964 1767056249 163128210 1896340268 1933912430 707452934 1811861971 1352133305 1794965714 70209024 1966665481 222594928 2123465893 912264276 2017493620 1154072317 572028973 1224737590 914242631 1958723205 971310041 1998511394 1784221799 1894050523 417419936 739190349 1644010431 784925834 38365188 199877028 583981213 263730668 1746784842 1007064670 20794215 1245315169 339082857 322586981 1239679879 411857643 1277593165 507442258 557959981 1940457927 1065907687 1073777263 596322811 178929883 941732434 23452445 128167387 251278467 245425369 2022634229 1053951148 394689796 1049678867 1752908536 1015674378 662842625 1733959134 2118624450 1313686728 1354263103 380075054 202483352 629006327 2014515865 701711199 760420319 350559850 1531826652 1286587966 254137780 1970331618 1749074643 925699518 2144990541 853166159 2112710520 1915787430 1380292818 807287430 1116055581 538675840 1374882670 1830537093 692011937 1087437391 575224022 640691344 522216833 1576806237 548096521 412357174 1574049654 1477644982 1309861044 82316879 942264960 594946524 1769927636 510948575 898023211 1615637244 1606403342 1169973007 434869086 2062778437 659676646 1434255300 1840359177 2019721947 751068798 1425681984 986140795 650546298 55966185 879423188 550058504 1633831841 772482248 769849124 1282041516 2118796429 519664690 253056472 1976540930 1380935808 427045819 546462273 947483309 776926362 2139473232 1519771712 1313666203 1050235982 828218250 39852218 1094605794 295578434 583501862 1347111593 2113983714 2004258197 1032017760 443043980 1808396589 140972674 1545778887 1816569504 1550354048 1411210996 1421602390 1416199814 1283450509 2053013677 958239726 294726501 1381615779 305600716 600725810 119598558 1998863397 1288996821 1163791967 1662302229 1209586459 1153822656 1726627308 181252555 1093614120 1308067583 1531158603 212883387 1661315086 1508442850 1775284956 264004784 1778156272 1811990287 1126295598 1934075990 2063471087 1135511741 57395320 1686904735 1195445332 1734757489 898195102 419738141 1947307784 362892988 1939695747 844204366 11246474 524440672 640982295 2038424155 577931607 1119541660 165573367 1040209193 1166028460 986214905 1068647552 969298677 543325014 914570678 1285560214 692671102 1670346936 1532756068 1777611469 825481738 1960554465 580741542 149726161 977195389 948118470 999252170 624627314 1687822288 656985191 1754801111 1301071580 1625103244 1705193200 1631074923 18483790 2031780431 1127258213 753268659 1752404772 1048397093 2056335819 332269716 1720671700 465424609 1626196912 336027480 1052095957 876220251 979521793 1834874425 526300218 385719706 25803502 623300174 2069164093 713503213 1655556551 1795064210 2142049473 1526489489 1152540636 541432618 824756807 1934010422 2028802972 1114253595 1601041436 326273024 1262182472 1192770657 2121790732 695661069 1624132531 1095367220 1324090771 1777476211 2051391943 625929931 274533336 2030056070 1997991070 847988993 173834704 946914302 1125410971 1324442977 873000862 307829199 1556330329 534004808 802473033 31136325 1240494703 1479418765 178671874 2127373675 437608883 1576003144 1432723138 1843357303 1705307662 1562957443 1949089692 1668262107 190816488 2022417203 1972436520 303282601 732995594 1101621782 2024203110 23816875 490559228 246543732 983585126 175104424 2094552853 770217510 2042491507 1634065077 1367521875 216934201 96087650 67960789 1627802332 2069373058 1183964493 2075439209 1471773796 2050920929 896450187 1619770220 616595240 470530018 293104273 689775351 569063936 1670039654 446988628 110132578 855005441 1545013216 51190005 2041967180 1001369683 1101769302 653823237 1302357599 791606062 1171376592 601812956 70682676 1854517899 1534142322 734676942 314367668 1203542964 158254438 35253776 2075039655 412750992 533504966 1652194934 996628328 2008218530 792904531 1599386438 1021710581 1996950296 2066761488 1329840994 846528080 832757127 535086018 156386677 40230477 1374252484 555679024 1316594263 1180277353 2011851738 879007829 1895701708 1369398700 617015538 817376396 1455889138 216740061 1100533166 2084151298 66420686 329772954 1431734635 450590363 1830433112 2140292048 975922792 1726970540 300932524 791532393 1810229154 1665073014 1362034022 1864192855 2073556954 1787438791 1873155049 1270908816 1328214906 404857969 1037902221 444843730 1391554208 159610320 1456061085 1954490409 47038100 1265764137 1992149729 1309000280 914545375 996992818 653666984 221368657 258618122 1686378724 529429487 319901557 1016160503 1777161610 2012547997 874276981 712500764 635394484 1361067339 2097102990 658406220 2065475439 921975431 1872176100 175822351 31239594 2007780315 1002543032 854851209 523199316 1591333538 1377201773 304655956 2057623257 459741159 1496409521 1587806757 929373156 2128118363 1301393687 1753216247 1785116398 1714842303 546389016 497525037 1316733687 356182455 1510213257 329563946 332160835 1905212701 637770385 1674252120 293211630 1546379454 284605539 391654349 2105864465 1085094971 1947142292 406795428 908540601 1682856144 1021423742 863387607 600366956 73418948 137077901 1324110410 749080589 1275846816 625842656 367565144 2035582438 127830828 845614805 982042170 106253030 134196041 563588399 1801603035 646318655 1412905101 1539065607 1999993742 113863284 150037580 666282763 460167122 1417611454 1610154810 66391857 1409681602 939914432 769052944 2074343274 801317646 250237476 191084461 1464208265 765002070 334192440 1961883707 268766417 571375323 156444036 2062087743 1024872908 1059947510 1554153598 739619016 624105965 2143372062 1248958099 754225175 1414125740 1067422586 969995575 2074195784 456673234 1170913569 915491450 270621901 1188149821 1105284369 1880218850 1536698220 1882217668 1630748101 1277620432 122006450 1339286315 137659596 546389098 764641644 1582310063 1425570296 1650646882 1568862343 1439385806 1518679936 377867148 821825015 722679327 859639344 1507124443 1575256308 819563976 317870051 1387122623 1081535843 1272223425 396343946 71919967 414643616 1740626600 1261172284 1604616892 1889463686 699393204 1176562492 176990097 705935117 2105520222 1306943687 1165723738 900515976 1304420504 1898818566 121821807 1964509237 1374723266 1119899635 162280600 427107395 1213617519 851755007 578985918 1705228446 1886727496 895707228 1771320491 1942445703 1716034312 95418606 516621193 2018067722 1759171993 2082558311 1904045109 1990237160 1020051845 2071369276 640076652 1797301868 1004213909 1880628567 324554248 1819140410 1089445304 1911258290 277020123 1372572821 1703188696 2041636048 1974245580 1754781174 932727548 137512279 787669911 1007022435 700482727 159347734 1869447684 1263818302 102128508 597831369 179058624 538045821 1561825402 461936359 1337778899 239625016 1418328569 997627396 1506808995 40435484 1724173234 1081969931 713312243 30600362 522912337 1053307826 1023189379 2028094818 191022818 1105046623 808107432 155165884 2119893975 846626811 1347644894 1439397957 1450105824 1007341957 763772937 1125506692 238547878 1307164797 382937926 552828260 1073066605 576188365 1232594155 1039577195 639867837 201974167 950248764 695416019 2022262057 1968466166 537922996 1929408166 506200970 825830558 187598471 1193695887 1805751818 1265678043 303226814 1643641947 168634275 1723767566 291331308 1963165873 91445441 1205365354 123767507 1315042261 1552552252 1424423248 263975437 284462403 92493881 2075317769 494887106 1219429743 1347235213 993572602 144594268 1503474782 223375507 1192655571 1438529657 440109041 660589205 457270922 745906618 954799398 1091693763 263574118 1409489367 675145193 1321714448 1488467296 182814520 1683188146 1632251051 1489134883 1634057351 22518964 563203192 1307041805 88389801 96892971 2116699077 675018185 1593017089 777827240 607414720 2097357046 1568751734 687826180 1337188936 29174849 1664593207 1704504216 83905285 1629630247 1185564847 1186633916 326905210 734471616 959866673 1367588751 1612099099 1202694562 591658318 981857429 980968556 966649737 2146275832 432908244 379054221 152987397 1640206296 639617027 1492322029 1848225803 1895124695 1431821173 611826261 1976626163 1832735518 1745503790 302140454 1663831304 67111461 1007002147 437015595 790626571 1163447155 746259028 538967597 1770420146 1643868111 1086983934 990745912 563011515 1956444842 1921850554 1344216615 1730648350 2137575761 1072349610 1242448972 161576937 931801539 2122141751 159754184 419198641 489550690 1039209406 1308946516 1568199467 2140635585 2062152880 406505056 442213376 1383848992 2131456336 1119755488 553340581 810561039 397748714 1050575103 155264800 1951980090 1965890382 2020496906 1816781356 410387984 430733259 1037329341 77826761 1686854369 681273079 1686559464 877861437 1916980269 1615318568 494945264 962971413 1433877254 1444239457 1394437480 1699089200 1444587628 333983135 796107012 606616145 1910812574 303598690 77998810 342800914 1880632933 1337852355 1829995373 1052598333 1631715265 2045437803 694286313 448132156 1565287365 1930399109 1383132411 58592757 1152850491 886655575 1218102805 976086178 291663859 1359564698 1247397068 841510079 1824838227 366127941 1264793083 1932778923 1326846344 1113869516 2111939402 1658903629 1675124086 223863783 92846904 1842529127 305187973 808066716 979227877 439071890 917125142 542220013 170640534 1284399665 1673104646 2033088494 1905446738 1288827409 1298375591 2117337340 824659950 815017566 1534686643 536539446 143394368 1347456669 1109859562 1871069512 203346640 703018793 1984628868 1617837729 1717782700 884583016 282664459 648603770 1771198272 1934126492 1702091686 1249031333 1109396730 973386975 542899845 872365344 281665065 220603335 121186778 636513043 364997413 311729265 1698720679 1708608318 1179576484 323870115 615909976 940943098 1728846307 1244067017 1218557521 192009601 729085317 1226483692 1422846520 1258267654 1130626457 484184608 2110411575 71813817 680040055 369522948 1489987531 1078841161 1457023440 1879879429 1781142822 1245398325 2000865356 857844785 1369816757 1290388475 2018338654 1829138962 1235760828 1608884464 237502769 1052729765 1692937202 680363927 1830642179 2147365088 1524028873 1872740543 960345628 1824134044 619445186 1527002157 1579335945 576339313 2130371018 771801392 1409915705 844594534 18304550 722691106 1667406931 122263675 970712808 385866187 699053724 1354465153 2140541100 1710828226 1750431598 547315618 490701437 992601194 1010561912 1570890469 2084872960 1224173491 1799165048 527228969 2119999770 2105131583 950560736 1909485210 1680096111 418609080 756925011 1357684671 2127638914 346065908 394627283 780128547 1518499295 430593780 844950844 2088350491 1079947069 679958500 1026667090 550317993 78195660 1127701586 607804253 1726421376 1549755191 1827922841 584474044 1153457068 1230730805 1843057322 613751780 1105411730 864627965 841059668 1300161033 1557181356 715392472 1505126088 1447868723 756658843 1999059107 1019315013 10366744 206566343 815140639 312556844 1690147632 209658864 1002591314 1084735287 410671082 197936222 2077209689 266190923 1792574799 1564852957 904346238 2033534636 1900207833 325311742 567119440 1932438704 1951673290 1702292201 981394910 255598751 1415523322 1438698086 1303704083 1415801796 500052585 1158908602 1461827723 1764669058 895871689 1574277752 778736071 881498916 898398780 1657052532 648165651 1971337777 1058533541 582380805 517898605 423806705 268849073 933111849 1215408073 2128585062 1487886101 1111289223 242086358 1502475825 997197005 1731418253 223433455 1026319084 1878052913 1925319939 1065545796 142342077 1884995473 421336790 1398873258 636422691 1084407663 881933151 265863190 691017441 1307542078 738350033 360233644 1489671966 1167206982 124623033 1723627882 698357366 2022250334 1092910835 908859899 968250990 520114393 1787639124 2104390323 883751756 1224513309 1114533263 184522009 1944488974 1274647569 1158863611 1106394649 581913921 2040821332 1987762570 1671236718 389548235 1137699898 656435413 77626199 732931159 522866899 2123297140 1042227685 1769186959 1248535958)))"
)

var tests = []struct {
	input string
	expected string
}{
	//ATOMIC tests
	{"T", "T"},
	{"NIL", "NIL"},
	{"9873", "9873"},
	//ATOM tests
	{"(atom (cdr (cons 34 54)))" , "T"},
	{"(atom (null (int (cons 34 54))))" , "T"},
	{"(atom -4)" , "T"},
	{"(atom (atom 45))" , "T"},
	{"(atom (cons 2 9))" , "NIL"},
	{"(atom (atom (atom T)))" , "T"},
	{"(atom ('(7 10)))" , "NIL"},
	{"(atom (' ZZ))" , "T"},
	//CAR tests
	{"(car (cons 2 45))" , "2"},
	{"(car (cons (car (cons 56 43)) T))" , "56"},
	//CDR tests
	{"(cdr (cons 2 45))" , "45"},
	{"(cdr (cons (cdr (cons 56 43)) T))" , "T"},
	{"(cdr ('(4 (cons 45 6))))" , "((cons 45 6))"},
	//COND tests
	{"(cond ((< 45 3) 1) (T 2) (34 45))" , "2"},
	{"(cond (NIL 54) (NIL 34) (34 78) (645 234))" , "78"},
	{"(cond (T 23))" , "23"},
	{"(cond (NIL 3) (T 2))" , "2"},
	{"(cond (4 34) ((+ T 4) 5))" , "34"},
	//CONS tests
	{"(cons (+ 2 3)(cons 8 (null 5)))" , "(5 8)"},
	{"(cons 2 (cons 3 (cons 4 5)))" , "(2 3 4 . 5)"},
	{"(cons (cons 1 2) (cons 3 4))" , "((1 . 2) 3 . 4)"},
	{"(cons (= 1 2) (= 3 3))" , "(NIL . T)"},
	{"(cons (car ('(7 8))) (cdr ('(6 10))))" , "(7 10)"},
	//EQ tests
	{"(= 23 23)" , "T"},
	{"(= (= 34 34) (= (= 23 23) NIL))" , "NIL"},
	{"(= T T)" , "T"},
	{"(= 2 (+ 1 1))" , "T"},
	{"(= (' XYZ1) (' XYZ1))" , "T"},
	{"(= (' A) (' B))" , "NIL"},
	{"(= (> 34 2) T)" , "T"},
	{"(= (int NIL) (null T))" , "T"},
	{"(= (cons 23 ()) 9)" , "NIL"},
	{"(= 23 T (cons 23 1))" , "NIL"},
	{"(= 1)" , "T"},
	{"(= -133)" , "T"},
	//EVEN_P tests
	{"(evenp 0)" , "T"},
	{"(evenp -34)" , "T"},
	{"(evenp 23)" , "NIL"},
	{"(evenp 55556)" , "T"},
	//GCD tests
	{"(gcd)" , "0"},
	{"(gcd 4)" , "4"},
	{"(gcd 91 49)" , "7"},
	{"(gcd 91 -49)" , "7"},
	{"(gcd 63 42 35)" , "7"},
	{"(gcd 81 153)" , "9"},
	//GREATER tests
	{"(> 98 1)" , "T"},
	{"(> (+ 3 2) 6)" , "NIL"},
	{"(> (cdr (cons (+ 12 12) 6)) (- 13 19))" , "T"},
	{"(> 23 45 98 34)" , "NIL"},
	{"(> 45 32 21 5)" , "T"},
	{"(> 69)" , "T"},
	//GREATER_EQ tests
	{"(>= 3)" , "T"},
	{"(>= 5 5 4)" , "T"},
	{"(>= 4 4 5)" , "NIL"},
	{"(>= 1 1 1 1 1 1)" , "T"},
	{"(>= 1 1 1 1 1 -134)" , "T"},
	//INT tests
	{"(int 3)" , "T"},
	{"(int (int 45))" , "NIL"},
	{"(int (+ 4 5))" , "T"},
	{"(int (' X23))" , "NIL"},
	{"(int (= 34 34))" , "NIL"},
	{"(int (cons 4 5))" , "NIL"},
	//LCM tests
	{"(lcm 14 35)" , "70"},
	{"(lcm 1 2 3 4 5 6)" , "60"},
	{"(lcm 0 5)" , "0"},
	{"(lcm -34)" , "34"},
	//LESS tests
	{"(< 1 19)" , "T"},
	{"(< 34)" , "T"},
	{"(< (- 34 3) 1)" , "NIL"},
	{"(< (* 12 32) (cond ((null (int T)) 3)))" , "NIL"},
	//LESS_EQ tests
	{"(<= 3)" , "T"},
	{"(<= 5 5 4)" , "NIL"},
	{"(<= 4 4 5)" , "T"},
	{"(<= 1 1 1 1 1 1)" , "T"},
	//MAX tests
	{"(max 6 12)" , "12"},
	{"(max 3)" , "3"},
	{"(max 2 3 0 7)" , "7"},
	//MIN tests
	{"(min 6 12)" , "6"},
	{"(min 3)" , "3"},
	{"(min 2 3 0 7)" , "0"},
	{"(min 2 3 0 -7)" , "-7"},
	//MINUS tests
	{"(- 1 -13)" , "14"},
	{"(- 13 (- (- 30 23) 7))" , "13"},
	{"(- 45)" , "-45"},
	{"(- 3 4 5)" , "-6"},
	//MINUS_P tests
	{"(minusp 0)" , "NIL"},
	{"(minusp -34)" , "T"},
	{"(minusp 23)" , "NIL"},
	//NOT_EQ tests
	{"(/= T T)" , "NIL"},
	{"(/= 2 (+ 2 1))" , "T"},
	{"(/= 45)" , "T"},
	{"(/= 45 -34 12 1)" , "T"},
	//NULL tests
	{"(null NIL)" , "T"},
	{"(null (null NIL))" , "NIL"},
	{"(null ('(A)))" , "NIL"},
	{"(null (= 2 (+ 1 1)))" , "NIL"},
	{"(null (int (int (+ 23 23))))" , "T"},
	//ODD_P tests
	{"(oddp 0)" , "NIL"},
	{"(oddp -35)" , "T"},
	{"(oddp 23)" , "T"},
	{"(oddp 98)" , "NIL"},
	//ONE_MINUS tests
	{"(1- 0)" , "-1"},
	{"(1- 45)" , "44"},
	//ONE_PLUS tests
	{"(1+ 0)" , "1"},
	{"(1+ 456)" , "457"},
	//PLUS tests
	{"(+)" , "0"},
	{"(+ 8 4)" , "12"},
	{"(+ 4 5 -3)" , "6"},
	{"(+ (+ 4 3) (+ (+ 1 2) 4))" , "14"},
	{"(+ 1 2)" , "3"},
	{"(+ (+ 3 5) (* 4 4))" , "24"},
	{"(+ (car (cons 2 0)) (car (cons 9 3)))" , "11"},
	{"(+ (+ 3 5) (car ('(7 8))))" , "15"},
	{"(+ (cond ((> 3 45) 1) (T 2)) 2854)" , "2856"},
	{"(+ (cond ((int T) 34) ((null 2) 1) ((int 12) 12) (T 3)) 0)" , "12"},
	//PLUS_P tests
	{"(plusp 0)" , "NIL"},
	{"(plusp -34)" , "NIL"},
	{"(plusp 23)" , "T"},
	//QUOTE tests
	{"('(3 4 5))" , "(3 4 5)"},
	{"('(cons 34 92))" , "(cons 34 92)"},
	//TIMES tests
	{"(* (- 0 1) 45)" , "-45"},
	{"(* 3 -34)" , "-102"},
	{"(* (* 1 2) (* 2 (* 5 6)))" , "120"},
	{"(* 23 4 2)" , "184"},
	{"(*)" , "1"},
	//ZERO_P tests
	{"(zerop 0)" , "T"},
	{"(zerop -0)" , "T"},
	{"(zerop 23)" , "NIL"},
}

func TestRegression(t *testing.T) {
	asserterSingleton := asserterImpl.NewSingleton()

	tokenizerSingleton := tokenizerImpl.NewSingleton()
	parserSingleton := parserImpl.NewSingleton()
	printerSingleton := printerImpl.NewSingleton()

	functionSingleton := functionImpl.NewSingleton(
		printerSingleton.GetPrinter(),
	)
	userDefinedSingleton := userDefinedImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
		asserterSingleton.GetFunctionLengthAsserter(),
	)
	evaluatorSingleton := evaluatorImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
	)
	interpreterSingleton := interpreterImpl.NewSingleton(
		tokenizerSingleton.GetTokenizer(),
		parserSingleton.GetParser(),
		userDefinedSingleton.GetFunctionGenerator(),
		asserterSingleton.GetExpressionListLengthAsserter(),
		evaluatorSingleton.GetProgramEvaluator(),
		printerSingleton.GetPrinter(),
	)

	interpreter := interpreterSingleton.GetInterpreter()


	for _, e  := range tests {

		actual, actualError := interpreter.Interpret(e.input)
		assert.Equal(t, e.expected, actual)
		assert.Nil(t, actualError)
	}
}

var errorTests = []struct {
	input string
	expected string
} {
	{"ERIC" , "Error! ERIC is not a valid atomic value!"},
	{"(1 2 3)" , "Error! Invalid CAR value: 1"},
	{"(BILL 23)" , "Error! Invalid CAR value: BILL"},
	{"(GREATER 33 (PLUS (TIM 0) 0))" , "Error! Invalid CAR value: TIM"},
	{"(atom)" , "Error! Expected length of atom list is 2!    Actual: 1"},
	{"(atom 2 3)" , "Error! Expected length of atom list is 2!    Actual: 3"},
	{"(car)" , "Error! Expected length of car list is 2!    Actual: 1"},
	{"(car 23 T)" , "Error! Expected length of car list is 2!    Actual: 3"},
	{"(car 23)" , "Error! Parameter of car is not a list.    Actual: 23"},
	{"(car (1 2 3))" , "Error! Invalid CAR value: 1"},
	{"(cdr)" , "Error! Expected length of cdr list is 2!    Actual: 1"},
	{"(cdr 1 NIL T)" , "Error! Expected length of cdr list is 2!    Actual: 4"},
	{"(cdr (int 2))" , "Error! Parameter of cdr is not a list.    Actual: T"},
	{"(cond)" , "Error! None of the conditions in the cond function evaluated to true."},
	{"(cond (23 34) 34)" , "Error! cond parameter is not a list!"},
	{"(cond ((int T) 34) ((null T) 12) ((NIL 1) 4))" , "Error! None of the conditions in the cond function evaluated to true."},
	{"(cond (2 34) (T 12) (NIL 23 T))" , "Error! Expected length of cond list is 2!    Actual: 3"},
	{"(cons)" , "Error! Expected length of cons list is 3!    Actual: 1"},
	{"(cons 23 12 34)" , "Error! Expected length of cons list is 3!    Actual: 4"},
	{"(=)" , "Error! Expected length of = list to be at least 2!    Actual: 1"},
	{"(evenp)" , "Error! Expected length of evenp list is 2!    Actual: 1"},
	{"(evenp 23 23)" , "Error! Expected length of evenp list is 2!    Actual: 3"},
	{"(evenp T)" , "Error! Parameter at position: 1 of function evenp is not numeric!    Actual: T"},
	{"(>)" , "Error! Expected length of > list to be at least 2!    Actual: 1"},
	{"(> NIL 23)" , "Error! Parameter at position: 1 of function > is not numeric!    Actual: NIL"},
	{"(>=)" , "Error! Expected length of >= list to be at least 2!    Actual: 1"},
	{"(>= NIL 23)" , "Error! Parameter at position: 1 of function >= is not numeric!    Actual: NIL"},
	{"(int)" , "Error! Expected length of int list is 2!    Actual: 1"},
	{"(int 12 5 94 95)" , "Error! Expected length of int list is 2!    Actual: 5"},
	{"(lcm)" , "Error! Expected length of lcm list to be at least 2!    Actual: 1"},
	{"(<)" , "Error! Expected length of < list to be at least 2!    Actual: 1"},
	{"(< 23 45 (cons T 45) 34)" , "Error! Parameter at position: 3 of function < is not numeric!    Actual: (T . 45)"},
	{"(< () 23)" , "Error! Parameter at position: 1 of function < is not numeric!    Actual: NIL"},
	{"(<=)" , "Error! Expected length of <= list to be at least 2!    Actual: 1"},
	{"(<= NIL 23)" , "Error! Parameter at position: 1 of function <= is not numeric!    Actual: NIL"},
	{"(max)" , "Error! Expected length of max list to be at least 2!    Actual: 1"},
	{"(min)" , "Error! Expected length of min list to be at least 2!    Actual: 1"},
	{"(-)" , "Error! Expected length of - list to be at least 2!    Actual: 1"},
	{"(- 22 (cons T 45) 34)" , "Error! Parameter at position: 2 of function - is not numeric!    Actual: (T . 45)"},
	{"(- (cons 34 20) 23)" , "Error! Parameter at position: 1 of function - is not numeric!    Actual: (34 . 20)"},
	{"(minusp)" , "Error! Expected length of minusp list is 2!    Actual: 1"},
	{"(minusp 23 23)" , "Error! Expected length of minusp list is 2!    Actual: 3"},
	{"(minusp T)" , "Error! Parameter at position: 1 of function minusp is not numeric!    Actual: T"},
	{"(/=)" , "Error! Expected length of /= list to be at least 2!    Actual: 1"},
	{"(null)" , "Error! Expected length of null list is 2!    Actual: 1"},
	{"(null 23 23 T)" , "Error! Expected length of null list is 2!    Actual: 4"},
	{"(oddp)" , "Error! Expected length of oddp list is 2!    Actual: 1"},
	{"(oddp 23 23)" , "Error! Expected length of oddp list is 2!    Actual: 3"},
	{"(oddp T)" , "Error! Parameter at position: 1 of function oddp is not numeric!    Actual: T"},
	{"(1-)" , "Error! Expected length of 1- list is 2!    Actual: 1"},
	{"(1- 23 23)" , "Error! Expected length of 1- list is 2!    Actual: 3"},
	{"(1- T)" , "Error! Parameter at position: 1 of function 1- is not numeric!    Actual: T"},
	{"(1+)" , "Error! Expected length of 1+ list is 2!    Actual: 1"},
	{"(1+ 23 23)" , "Error! Expected length of 1+ list is 2!    Actual: 3"},
	{"(1+ T)" , "Error! Parameter at position: 1 of function 1+ is not numeric!    Actual: T"},
	{"(+ T NIL 34)" , "Error! Parameter at position: 1 of function + is not numeric!    Actual: T"},
	{"(+ 23 (cons 34 20))" , "Error! Parameter at position: 2 of function + is not numeric!    Actual: (34 . 20)"},
	{"(plusp)" , "Error! Expected length of plusp list is 2!    Actual: 1"},
	{"(plusp 23 23)" , "Error! Expected length of plusp list is 2!    Actual: 3"},
	{"(plusp T)" , "Error! Parameter at position: 1 of function plusp is not numeric!    Actual: T"},
	{"(')" , "Error! Expected length of ' list is 2!    Actual: 1"},
	{"(' T NIL)" , "Error! Expected length of ' list is 2!    Actual: 3"},
	{"(* 2 T)" , "Error! Parameter at position: 2 of function * is not numeric!    Actual: T"},
	{"(zerop)" , "Error! Expected length of zerop list is 2!    Actual: 1"},
	{"(zerop 23 23)" , "Error! Expected length of zerop list is 2!    Actual: 3"},
	{"(zerop T)" , "Error! Parameter at position: 1 of function zerop is not numeric!    Actual: T"},
}

func TestErrorCases(t *testing.T) {
	asserterSingleton := asserterImpl.NewSingleton()

	tokenizerSingleton := tokenizerImpl.NewSingleton()
	parserSingleton := parserImpl.NewSingleton()
	printerSingleton := printerImpl.NewSingleton()

	functionSingleton := functionImpl.NewSingleton(
		printerSingleton.GetPrinter(),
	)
	userDefinedSingleton := userDefinedImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
		asserterSingleton.GetFunctionLengthAsserter(),
	)
	evaluatorSingleton := evaluatorImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
	)
	interpreterSingleton := interpreterImpl.NewSingleton(
		tokenizerSingleton.GetTokenizer(),
		parserSingleton.GetParser(),
		userDefinedSingleton.GetFunctionGenerator(),
		asserterSingleton.GetExpressionListLengthAsserter(),
		evaluatorSingleton.GetProgramEvaluator(),
		printerSingleton.GetPrinter(),
	)

	interpreter := interpreterSingleton.GetInterpreter()

	for _, e := range errorTests {
		actual, actualError := interpreter.Interpret(e.input)

		assert.Empty(t, actual)
		assert.Equal(t, e.expected, actualError.Error())
	}
}

var userDefinedTests = []struct {
	input string
	expected string
} {
	{userDefinedDiffMethod + "(diff 5 6)" , "T"},
	{userDefinedDiffMethod + "(diff (+ 1 1) 4)" , "T"},
	{userDefinedDiffMethod + "(diff T NIL)" , "T"},
	{userDefinedDiffMethod + "(diff T T)" , "NIL"},
	{userDefinedDiffMethod + "(diff (* (+ 1 3) 2) (- 12 4))" , "NIL"},
	{userDefinedNegateMethod + "(negate (- 0 13))" , "13"},
	{userDefinedNegateMethod + "(negate 0)" , "0"},
	{userDefinedNegateMethod + "(negate 234)" , "-234"},
	{userDefinedOneMethod + "(one)" , "1"},
	{userDefinedOneMethod + "(+ (one) (one))" , "2"},
	{userDefinedIncrementMethod + "(increment 3)" , "4"},
	{userDefinedIncrementMethod + "(increment 0)" , "1"},
	{userDefinedIncrementMethod + "(increment (- 0 1))" , "0"},
	{userDefinedFactorialMethod + "(factorial 6)" , "720"},
	{userDefinedFactorialMethod + "(factorial 0)" , "1"},
	{userDefinedFactorialMethod + "(factorial 1)" , "1"},
	{userDefinedFactorialMethod + "(factorial (- 0 1))" , "1"},
	{userDefinedFactorialMethod + "(factorial 10)" , "3628800"},
	{userDefinedGetValMethod + "(getval 3 (cons (cons 3 5) NIL))" , "5"},
	{userDefinedGetValMethod + "(getval 45 (cons (cons 3 34) (cons (cons 45 ('(3 4 5))) (cons (cons 3 23) NIL))))" , "(3 4 5)"},
	{userDefinedGetValMethod + "(getval 1 (cons (cons 1 23) (cons (cons 1 48) NIL)))" , "23"},
	{userDefinedGetValMethod + "(getval 564 (cons (cons 34 4) (cons (cons 23 4) (cons (cons 564 34) NIL))))" , "34"},
	{userDefinedMemMethod + "(mem 3 ('(2 3 4)))" , "T"},
	{userDefinedMemMethod + "(mem 2 ('()))" , "NIL"},
	{userDefinedMemMethod + "(mem 2 ('(4 5 6 7 8 9 10 12 13)))" , "NIL"},
	{userDefinedDynamicScopeMethod + "(G 5)" , "15"},
	{userDefinedDynamicScopeMethod + "(H 5)" , "25"},
	{userDefinedDynamicScopeMethod + "(G (H 5))" , "35"},
	{userDefinedBoundMethod + "(bound () ())" , "NIL"},
	{userDefinedBoundMethod + "(bound 3 4)" , "NIL"},
	{userDefinedBoundMethod + "(bound 3 ())" , "NIL"},
	{userDefinedBoundMethod + "(bound 3 ('((3 5))))" , "T"},
	{userDefinedBoundMethod + "(bound 3 ('((23 34)(45 3)(56 23))))" , "NIL"},
	{userDefinedBoundMethod + "(bound 3 ('((23 34)(45 3)(3 23))))" , "T"},
	{userDefinedAddPairsMethod + "(addpairs (cons 3 NIL) (cons 34 NIL) ())" , "((3 . 34))"},
	{userDefinedAddPairsMethod + "(addpairs (cons 45 NIL) (cons 56 NIL) ('()))" , "((45 . 56))"},
	{userDefinedAddPairsMethod + "(addpairs (cons 45 (cons 89 (cons 34 NIL)))(cons ('(23 44 45)) (cons NIL (cons ('(56 34)) NIL)))(cons (cons 34 34) (cons (cons 67 12) NIL)))" , "((45 23 44 45) (89) (34 56 34) (34 . 34) (67 . 12))"},
	{userDefinedUniMethod + userDefinedMemMethod + "(uni () ())" , "NIL"},
	{userDefinedUniMethod + userDefinedMemMethod + "(uni ('(1)) ())" , "(1)"},
	{userDefinedUniMethod + userDefinedMemMethod + "(uni () ('(1 2)))" , "(1 2)"},
	{userDefinedUniMethod + userDefinedMemMethod + "(uni ('(1 2 3)) ())" , "(1 2 3)"},
	{userDefinedUniMethod + userDefinedMemMethod + "(uni () ('(4 5 6)))" , "(4 5 6)"},
	{userDefinedUniMethod + userDefinedMemMethod + "(uni ('(1 56 34 23 459 3934 454854 9239 34934 845498 3434 9595)) ('(1 3 4 45 23 9595 67 69 0 343)))" , "(56 34 459 3934 454854 9239 34934 845498 3434 1 3 4 45 23 9595 67 69 0 343)"},
}

func TestUserDefinedInput(t *testing.T){
	asserterSingleton := asserterImpl.NewSingleton()

	tokenizerSingleton := tokenizerImpl.NewSingleton()
	parserSingleton := parserImpl.NewSingleton()
	printerSingleton := printerImpl.NewSingleton()

	functionSingleton := functionImpl.NewSingleton(
		printerSingleton.GetPrinter(),
	)
	userDefinedSingleton := userDefinedImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
		asserterSingleton.GetFunctionLengthAsserter(),
	)
	evaluatorSingleton := evaluatorImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
	)
	interpreterSingleton := interpreterImpl.NewSingleton(
		tokenizerSingleton.GetTokenizer(),
		parserSingleton.GetParser(),
		userDefinedSingleton.GetFunctionGenerator(),
		asserterSingleton.GetExpressionListLengthAsserter(),
		evaluatorSingleton.GetProgramEvaluator(),
		printerSingleton.GetPrinter(),
	)

	interpreter := interpreterSingleton.GetInterpreter()


	for _, e  := range userDefinedTests {

		actual, actualError := interpreter.Interpret(e.input)
		assert.Equal(t, e.expected, actual)
		assert.Nil(t, actualError)
	}
}

var invalidUserDefinedTests = [] struct {
	method string
	input string
	expected string
} {
	{"(defun X ())" , "69" , "Error! Expected length of defun list is 4!    Actual: 3"},
	{"(defun + () (MINUS 1 2))" , "(+)" , "Error! Invalid function name: +"},
	{"(defun diff (X Y NIL) 12)" , "69" , "Error! Invalid formal parameter name!"},
	{"(defun diff (X X)12)" , "69" , "Error! Duplicate formal parameter name!"},
	{"(defun factorial (X)(cond((< X 1) 1)(T (* E (factorial (- X 1))))))" , "(factorial 6)" , "Error! Parameter at position: 1 of function * is not numeric!    Actual: E"},
	{"(defun diff (X Y)(cond ((= X Y) NIL) (T T)))" , "(diff 3)" , "Error! Expected length of diff list is 3!    Actual: 2"},
}

func TestInvalidUserDefined(t *testing.T) {
	asserterSingleton := asserterImpl.NewSingleton()

	tokenizerSingleton := tokenizerImpl.NewSingleton()
	parserSingleton := parserImpl.NewSingleton()
	printerSingleton := printerImpl.NewSingleton()

	functionSingleton := functionImpl.NewSingleton(
		printerSingleton.GetPrinter(),
	)
	userDefinedSingleton := userDefinedImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
		asserterSingleton.GetFunctionLengthAsserter(),
	)
	evaluatorSingleton := evaluatorImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
	)
	interpreterSingleton := interpreterImpl.NewSingleton(
		tokenizerSingleton.GetTokenizer(),
		parserSingleton.GetParser(),
		userDefinedSingleton.GetFunctionGenerator(),
		asserterSingleton.GetExpressionListLengthAsserter(),
		evaluatorSingleton.GetProgramEvaluator(),
		printerSingleton.GetPrinter(),
	)

	interpreter := interpreterSingleton.GetInterpreter()

	for _, e := range invalidUserDefinedTests {
		actual, actualError := interpreter.Interpret(e.method + e.input)

		assert.Empty(t, actual)
		assert.Equal(t, e.expected, actualError.Error())
	}
}

func TestLargeInput(t *testing.T) {
	asserterSingleton := asserterImpl.NewSingleton()

	tokenizerSingleton := tokenizerImpl.NewSingleton()
	parserSingleton := parserImpl.NewSingleton()
	printerSingleton := printerImpl.NewSingleton()

	functionSingleton := functionImpl.NewSingleton(
		printerSingleton.GetPrinter(),
	)
	userDefinedSingleton := userDefinedImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
		asserterSingleton.GetFunctionLengthAsserter(),
	)
	evaluatorSingleton := evaluatorImpl.NewSingleton(
		functionSingleton.GetFunctionMap(),
	)
	interpreterSingleton := interpreterImpl.NewSingleton(
		tokenizerSingleton.GetTokenizer(),
		parserSingleton.GetParser(),
		userDefinedSingleton.GetFunctionGenerator(),
		asserterSingleton.GetExpressionListLengthAsserter(),
		evaluatorSingleton.GetProgramEvaluator(),
		printerSingleton.GetPrinter(),
	)

	interpreter := interpreterSingleton.GetInterpreter()

	actual, actualError := interpreter.Interpret(userDefinedMemMethod + memLargeInput)

	assert.Equal(t, "T", actual)
	assert.Nil(t, actualError)
}