// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/evaluator/impl/internal"
	"sync"
)

type FakeCondFunctionEvaluator struct {
	EvaluateCondProgramItemStub        func(datamodels.ProgramItem, datamodels.ProgramItemStack) error
	evaluateCondProgramItemMutex       sync.RWMutex
	evaluateCondProgramItemArgsForCall []struct {
		arg1 datamodels.ProgramItem
		arg2 datamodels.ProgramItemStack
	}
	evaluateCondProgramItemReturns struct {
		result1 error
	}
	evaluateCondProgramItemReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCondFunctionEvaluator) EvaluateCondProgramItem(arg1 datamodels.ProgramItem, arg2 datamodels.ProgramItemStack) error {
	fake.evaluateCondProgramItemMutex.Lock()
	ret, specificReturn := fake.evaluateCondProgramItemReturnsOnCall[len(fake.evaluateCondProgramItemArgsForCall)]
	fake.evaluateCondProgramItemArgsForCall = append(fake.evaluateCondProgramItemArgsForCall, struct {
		arg1 datamodels.ProgramItem
		arg2 datamodels.ProgramItemStack
	}{arg1, arg2})
	stub := fake.EvaluateCondProgramItemStub
	fakeReturns := fake.evaluateCondProgramItemReturns
	fake.recordInvocation("EvaluateCondProgramItem", []interface{}{arg1, arg2})
	fake.evaluateCondProgramItemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCondFunctionEvaluator) EvaluateCondProgramItemCallCount() int {
	fake.evaluateCondProgramItemMutex.RLock()
	defer fake.evaluateCondProgramItemMutex.RUnlock()
	return len(fake.evaluateCondProgramItemArgsForCall)
}

func (fake *FakeCondFunctionEvaluator) EvaluateCondProgramItemCalls(stub func(datamodels.ProgramItem, datamodels.ProgramItemStack) error) {
	fake.evaluateCondProgramItemMutex.Lock()
	defer fake.evaluateCondProgramItemMutex.Unlock()
	fake.EvaluateCondProgramItemStub = stub
}

func (fake *FakeCondFunctionEvaluator) EvaluateCondProgramItemArgsForCall(i int) (datamodels.ProgramItem, datamodels.ProgramItemStack) {
	fake.evaluateCondProgramItemMutex.RLock()
	defer fake.evaluateCondProgramItemMutex.RUnlock()
	argsForCall := fake.evaluateCondProgramItemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCondFunctionEvaluator) EvaluateCondProgramItemReturns(result1 error) {
	fake.evaluateCondProgramItemMutex.Lock()
	defer fake.evaluateCondProgramItemMutex.Unlock()
	fake.EvaluateCondProgramItemStub = nil
	fake.evaluateCondProgramItemReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCondFunctionEvaluator) EvaluateCondProgramItemReturnsOnCall(i int, result1 error) {
	fake.evaluateCondProgramItemMutex.Lock()
	defer fake.evaluateCondProgramItemMutex.Unlock()
	fake.EvaluateCondProgramItemStub = nil
	if fake.evaluateCondProgramItemReturnsOnCall == nil {
		fake.evaluateCondProgramItemReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.evaluateCondProgramItemReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCondFunctionEvaluator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateCondProgramItemMutex.RLock()
	defer fake.evaluateCondProgramItemMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCondFunctionEvaluator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.CondFunctionEvaluator = new(FakeCondFunctionEvaluator)
