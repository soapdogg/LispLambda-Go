// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/evaluator/impl/internal"
	"sync"
)

type FakeUserDefinedFunctionEvaluator struct {
	EvaluateUserDefinedFunctionStub        func(datamodels.DefunFunction, map[string]datamodels.Node, datamodels.NodeStack, datamodels.NodeStack, datamodels.ProgramItemStack)
	evaluateUserDefinedFunctionMutex       sync.RWMutex
	evaluateUserDefinedFunctionArgsForCall []struct {
		arg1 datamodels.DefunFunction
		arg2 map[string]datamodels.Node
		arg3 datamodels.NodeStack
		arg4 datamodels.NodeStack
		arg5 datamodels.ProgramItemStack
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserDefinedFunctionEvaluator) EvaluateUserDefinedFunction(arg1 datamodels.DefunFunction, arg2 map[string]datamodels.Node, arg3 datamodels.NodeStack, arg4 datamodels.NodeStack, arg5 datamodels.ProgramItemStack) {
	fake.evaluateUserDefinedFunctionMutex.Lock()
	fake.evaluateUserDefinedFunctionArgsForCall = append(fake.evaluateUserDefinedFunctionArgsForCall, struct {
		arg1 datamodels.DefunFunction
		arg2 map[string]datamodels.Node
		arg3 datamodels.NodeStack
		arg4 datamodels.NodeStack
		arg5 datamodels.ProgramItemStack
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.EvaluateUserDefinedFunctionStub
	fake.recordInvocation("EvaluateUserDefinedFunction", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.evaluateUserDefinedFunctionMutex.Unlock()
	if stub != nil {
		fake.EvaluateUserDefinedFunctionStub(arg1, arg2, arg3, arg4, arg5)
	}
}

func (fake *FakeUserDefinedFunctionEvaluator) EvaluateUserDefinedFunctionCallCount() int {
	fake.evaluateUserDefinedFunctionMutex.RLock()
	defer fake.evaluateUserDefinedFunctionMutex.RUnlock()
	return len(fake.evaluateUserDefinedFunctionArgsForCall)
}

func (fake *FakeUserDefinedFunctionEvaluator) EvaluateUserDefinedFunctionCalls(stub func(datamodels.DefunFunction, map[string]datamodels.Node, datamodels.NodeStack, datamodels.NodeStack, datamodels.ProgramItemStack)) {
	fake.evaluateUserDefinedFunctionMutex.Lock()
	defer fake.evaluateUserDefinedFunctionMutex.Unlock()
	fake.EvaluateUserDefinedFunctionStub = stub
}

func (fake *FakeUserDefinedFunctionEvaluator) EvaluateUserDefinedFunctionArgsForCall(i int) (datamodels.DefunFunction, map[string]datamodels.Node, datamodels.NodeStack, datamodels.NodeStack, datamodels.ProgramItemStack) {
	fake.evaluateUserDefinedFunctionMutex.RLock()
	defer fake.evaluateUserDefinedFunctionMutex.RUnlock()
	argsForCall := fake.evaluateUserDefinedFunctionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeUserDefinedFunctionEvaluator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateUserDefinedFunctionMutex.RLock()
	defer fake.evaluateUserDefinedFunctionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserDefinedFunctionEvaluator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.UserDefinedFunctionEvaluator = new(FakeUserDefinedFunctionEvaluator)
