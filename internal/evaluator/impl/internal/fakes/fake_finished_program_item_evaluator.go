// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/evaluator/impl/internal"
	"sync"
)

type FakeFinishedProgramItemEvaluator struct {
	EvaluateFinishedProgramItemStub        func(datamodels.ProgramItem, map[string]datamodels.DefunFunction, datamodels.NodeStack, datamodels.ProgramItemStack) error
	evaluateFinishedProgramItemMutex       sync.RWMutex
	evaluateFinishedProgramItemArgsForCall []struct {
		arg1 datamodels.ProgramItem
		arg2 map[string]datamodels.DefunFunction
		arg3 datamodels.NodeStack
		arg4 datamodels.ProgramItemStack
	}
	evaluateFinishedProgramItemReturns struct {
		result1 error
	}
	evaluateFinishedProgramItemReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFinishedProgramItemEvaluator) EvaluateFinishedProgramItem(arg1 datamodels.ProgramItem, arg2 map[string]datamodels.DefunFunction, arg3 datamodels.NodeStack, arg4 datamodels.ProgramItemStack) error {
	fake.evaluateFinishedProgramItemMutex.Lock()
	ret, specificReturn := fake.evaluateFinishedProgramItemReturnsOnCall[len(fake.evaluateFinishedProgramItemArgsForCall)]
	fake.evaluateFinishedProgramItemArgsForCall = append(fake.evaluateFinishedProgramItemArgsForCall, struct {
		arg1 datamodels.ProgramItem
		arg2 map[string]datamodels.DefunFunction
		arg3 datamodels.NodeStack
		arg4 datamodels.ProgramItemStack
	}{arg1, arg2, arg3, arg4})
	stub := fake.EvaluateFinishedProgramItemStub
	fakeReturns := fake.evaluateFinishedProgramItemReturns
	fake.recordInvocation("EvaluateFinishedProgramItem", []interface{}{arg1, arg2, arg3, arg4})
	fake.evaluateFinishedProgramItemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFinishedProgramItemEvaluator) EvaluateFinishedProgramItemCallCount() int {
	fake.evaluateFinishedProgramItemMutex.RLock()
	defer fake.evaluateFinishedProgramItemMutex.RUnlock()
	return len(fake.evaluateFinishedProgramItemArgsForCall)
}

func (fake *FakeFinishedProgramItemEvaluator) EvaluateFinishedProgramItemCalls(stub func(datamodels.ProgramItem, map[string]datamodels.DefunFunction, datamodels.NodeStack, datamodels.ProgramItemStack) error) {
	fake.evaluateFinishedProgramItemMutex.Lock()
	defer fake.evaluateFinishedProgramItemMutex.Unlock()
	fake.EvaluateFinishedProgramItemStub = stub
}

func (fake *FakeFinishedProgramItemEvaluator) EvaluateFinishedProgramItemArgsForCall(i int) (datamodels.ProgramItem, map[string]datamodels.DefunFunction, datamodels.NodeStack, datamodels.ProgramItemStack) {
	fake.evaluateFinishedProgramItemMutex.RLock()
	defer fake.evaluateFinishedProgramItemMutex.RUnlock()
	argsForCall := fake.evaluateFinishedProgramItemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeFinishedProgramItemEvaluator) EvaluateFinishedProgramItemReturns(result1 error) {
	fake.evaluateFinishedProgramItemMutex.Lock()
	defer fake.evaluateFinishedProgramItemMutex.Unlock()
	fake.EvaluateFinishedProgramItemStub = nil
	fake.evaluateFinishedProgramItemReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFinishedProgramItemEvaluator) EvaluateFinishedProgramItemReturnsOnCall(i int, result1 error) {
	fake.evaluateFinishedProgramItemMutex.Lock()
	defer fake.evaluateFinishedProgramItemMutex.Unlock()
	fake.EvaluateFinishedProgramItemStub = nil
	if fake.evaluateFinishedProgramItemReturnsOnCall == nil {
		fake.evaluateFinishedProgramItemReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.evaluateFinishedProgramItemReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFinishedProgramItemEvaluator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateFinishedProgramItemMutex.RLock()
	defer fake.evaluateFinishedProgramItemMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFinishedProgramItemEvaluator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.FinishedProgramItemEvaluator = new(FakeFinishedProgramItemEvaluator)
