// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/evaluator"
	"sync"
)

type FakeProgramEvaluator struct {
	EvaluateStub        func([]datamodels.Node, map[string]datamodels.DefunFunction) ([]datamodels.Node, error)
	evaluateMutex       sync.RWMutex
	evaluateArgsForCall []struct {
		arg1 []datamodels.Node
		arg2 map[string]datamodels.DefunFunction
	}
	evaluateReturns struct {
		result1 []datamodels.Node
		result2 error
	}
	evaluateReturnsOnCall map[int]struct {
		result1 []datamodels.Node
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProgramEvaluator) Evaluate(arg1 []datamodels.Node, arg2 map[string]datamodels.DefunFunction) ([]datamodels.Node, error) {
	var arg1Copy []datamodels.Node
	if arg1 != nil {
		arg1Copy = make([]datamodels.Node, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.evaluateMutex.Lock()
	ret, specificReturn := fake.evaluateReturnsOnCall[len(fake.evaluateArgsForCall)]
	fake.evaluateArgsForCall = append(fake.evaluateArgsForCall, struct {
		arg1 []datamodels.Node
		arg2 map[string]datamodels.DefunFunction
	}{arg1Copy, arg2})
	stub := fake.EvaluateStub
	fakeReturns := fake.evaluateReturns
	fake.recordInvocation("Evaluate", []interface{}{arg1Copy, arg2})
	fake.evaluateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProgramEvaluator) EvaluateCallCount() int {
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	return len(fake.evaluateArgsForCall)
}

func (fake *FakeProgramEvaluator) EvaluateCalls(stub func([]datamodels.Node, map[string]datamodels.DefunFunction) ([]datamodels.Node, error)) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = stub
}

func (fake *FakeProgramEvaluator) EvaluateArgsForCall(i int) ([]datamodels.Node, map[string]datamodels.DefunFunction) {
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	argsForCall := fake.evaluateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProgramEvaluator) EvaluateReturns(result1 []datamodels.Node, result2 error) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = nil
	fake.evaluateReturns = struct {
		result1 []datamodels.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeProgramEvaluator) EvaluateReturnsOnCall(i int, result1 []datamodels.Node, result2 error) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = nil
	if fake.evaluateReturnsOnCall == nil {
		fake.evaluateReturnsOnCall = make(map[int]struct {
			result1 []datamodels.Node
			result2 error
		})
	}
	fake.evaluateReturnsOnCall[i] = struct {
		result1 []datamodels.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeProgramEvaluator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProgramEvaluator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ evaluator.ProgramEvaluator = new(FakeProgramEvaluator)
