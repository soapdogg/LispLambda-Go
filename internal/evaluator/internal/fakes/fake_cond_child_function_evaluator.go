// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/evaluator/internal"
	"sync"
)

type FakeCondChildFunctionEvaluator struct {
	EvaluateCondChildFunctionStub        func(datamodels.ProgramItem, datamodels.NodeStack, datamodels.ProgramItemStack)
	evaluateCondChildFunctionMutex       sync.RWMutex
	evaluateCondChildFunctionArgsForCall []struct {
		arg1 datamodels.ProgramItem
		arg2 datamodels.NodeStack
		arg3 datamodels.ProgramItemStack
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCondChildFunctionEvaluator) EvaluateCondChildFunction(arg1 datamodels.ProgramItem, arg2 datamodels.NodeStack, arg3 datamodels.ProgramItemStack) {
	fake.evaluateCondChildFunctionMutex.Lock()
	fake.evaluateCondChildFunctionArgsForCall = append(fake.evaluateCondChildFunctionArgsForCall, struct {
		arg1 datamodels.ProgramItem
		arg2 datamodels.NodeStack
		arg3 datamodels.ProgramItemStack
	}{arg1, arg2, arg3})
	stub := fake.EvaluateCondChildFunctionStub
	fake.recordInvocation("EvaluateCondChildFunction", []interface{}{arg1, arg2, arg3})
	fake.evaluateCondChildFunctionMutex.Unlock()
	if stub != nil {
		fake.EvaluateCondChildFunctionStub(arg1, arg2, arg3)
	}
}

func (fake *FakeCondChildFunctionEvaluator) EvaluateCondChildFunctionCallCount() int {
	fake.evaluateCondChildFunctionMutex.RLock()
	defer fake.evaluateCondChildFunctionMutex.RUnlock()
	return len(fake.evaluateCondChildFunctionArgsForCall)
}

func (fake *FakeCondChildFunctionEvaluator) EvaluateCondChildFunctionCalls(stub func(datamodels.ProgramItem, datamodels.NodeStack, datamodels.ProgramItemStack)) {
	fake.evaluateCondChildFunctionMutex.Lock()
	defer fake.evaluateCondChildFunctionMutex.Unlock()
	fake.EvaluateCondChildFunctionStub = stub
}

func (fake *FakeCondChildFunctionEvaluator) EvaluateCondChildFunctionArgsForCall(i int) (datamodels.ProgramItem, datamodels.NodeStack, datamodels.ProgramItemStack) {
	fake.evaluateCondChildFunctionMutex.RLock()
	defer fake.evaluateCondChildFunctionMutex.RUnlock()
	argsForCall := fake.evaluateCondChildFunctionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCondChildFunctionEvaluator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateCondChildFunctionMutex.RLock()
	defer fake.evaluateCondChildFunctionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCondChildFunctionEvaluator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.CondChildFunctionEvaluator = new(FakeCondChildFunctionEvaluator)
