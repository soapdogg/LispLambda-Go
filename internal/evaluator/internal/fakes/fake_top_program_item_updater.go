// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/evaluator/internal"
	"sync"
)

type FakeTopProgramItemUpdater struct {
	UpdateTopProgramItemToNextChildStub        func(datamodels.ProgramItemStack)
	updateTopProgramItemToNextChildMutex       sync.RWMutex
	updateTopProgramItemToNextChildArgsForCall []struct {
		arg1 datamodels.ProgramItemStack
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTopProgramItemUpdater) UpdateTopProgramItemToNextChild(arg1 datamodels.ProgramItemStack) {
	fake.updateTopProgramItemToNextChildMutex.Lock()
	fake.updateTopProgramItemToNextChildArgsForCall = append(fake.updateTopProgramItemToNextChildArgsForCall, struct {
		arg1 datamodels.ProgramItemStack
	}{arg1})
	stub := fake.UpdateTopProgramItemToNextChildStub
	fake.recordInvocation("UpdateTopProgramItemToNextChild", []interface{}{arg1})
	fake.updateTopProgramItemToNextChildMutex.Unlock()
	if stub != nil {
		fake.UpdateTopProgramItemToNextChildStub(arg1)
	}
}

func (fake *FakeTopProgramItemUpdater) UpdateTopProgramItemToNextChildCallCount() int {
	fake.updateTopProgramItemToNextChildMutex.RLock()
	defer fake.updateTopProgramItemToNextChildMutex.RUnlock()
	return len(fake.updateTopProgramItemToNextChildArgsForCall)
}

func (fake *FakeTopProgramItemUpdater) UpdateTopProgramItemToNextChildCalls(stub func(datamodels.ProgramItemStack)) {
	fake.updateTopProgramItemToNextChildMutex.Lock()
	defer fake.updateTopProgramItemToNextChildMutex.Unlock()
	fake.UpdateTopProgramItemToNextChildStub = stub
}

func (fake *FakeTopProgramItemUpdater) UpdateTopProgramItemToNextChildArgsForCall(i int) datamodels.ProgramItemStack {
	fake.updateTopProgramItemToNextChildMutex.RLock()
	defer fake.updateTopProgramItemToNextChildMutex.RUnlock()
	argsForCall := fake.updateTopProgramItemToNextChildArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTopProgramItemUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateTopProgramItemToNextChildMutex.RLock()
	defer fake.updateTopProgramItemToNextChildMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTopProgramItemUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.TopProgramItemUpdater = new(FakeTopProgramItemUpdater)
