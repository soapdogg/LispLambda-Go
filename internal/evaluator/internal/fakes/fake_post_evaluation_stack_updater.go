// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/evaluator/internal"
	"sync"
)

type FakePostEvaluationStackUpdater struct {
	UpdateStacksAfterEvaluationStub        func(datamodels.Node, map[string]datamodels.Node, datamodels.NodeStack, datamodels.ProgramItemStack)
	updateStacksAfterEvaluationMutex       sync.RWMutex
	updateStacksAfterEvaluationArgsForCall []struct {
		arg1 datamodels.Node
		arg2 map[string]datamodels.Node
		arg3 datamodels.NodeStack
		arg4 datamodels.ProgramItemStack
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePostEvaluationStackUpdater) UpdateStacksAfterEvaluation(arg1 datamodels.Node, arg2 map[string]datamodels.Node, arg3 datamodels.NodeStack, arg4 datamodels.ProgramItemStack) {
	fake.updateStacksAfterEvaluationMutex.Lock()
	fake.updateStacksAfterEvaluationArgsForCall = append(fake.updateStacksAfterEvaluationArgsForCall, struct {
		arg1 datamodels.Node
		arg2 map[string]datamodels.Node
		arg3 datamodels.NodeStack
		arg4 datamodels.ProgramItemStack
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateStacksAfterEvaluationStub
	fake.recordInvocation("UpdateStacksAfterEvaluation", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateStacksAfterEvaluationMutex.Unlock()
	if stub != nil {
		fake.UpdateStacksAfterEvaluationStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakePostEvaluationStackUpdater) UpdateStacksAfterEvaluationCallCount() int {
	fake.updateStacksAfterEvaluationMutex.RLock()
	defer fake.updateStacksAfterEvaluationMutex.RUnlock()
	return len(fake.updateStacksAfterEvaluationArgsForCall)
}

func (fake *FakePostEvaluationStackUpdater) UpdateStacksAfterEvaluationCalls(stub func(datamodels.Node, map[string]datamodels.Node, datamodels.NodeStack, datamodels.ProgramItemStack)) {
	fake.updateStacksAfterEvaluationMutex.Lock()
	defer fake.updateStacksAfterEvaluationMutex.Unlock()
	fake.UpdateStacksAfterEvaluationStub = stub
}

func (fake *FakePostEvaluationStackUpdater) UpdateStacksAfterEvaluationArgsForCall(i int) (datamodels.Node, map[string]datamodels.Node, datamodels.NodeStack, datamodels.ProgramItemStack) {
	fake.updateStacksAfterEvaluationMutex.RLock()
	defer fake.updateStacksAfterEvaluationMutex.RUnlock()
	argsForCall := fake.updateStacksAfterEvaluationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePostEvaluationStackUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateStacksAfterEvaluationMutex.RLock()
	defer fake.updateStacksAfterEvaluationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePostEvaluationStackUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.PostEvaluationStackUpdater = new(FakePostEvaluationStackUpdater)
