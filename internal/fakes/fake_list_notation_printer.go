// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal"
	"lisp_lambda-go/internal/core/datamodels"
	"sync"
)

type FakeListNotationPrinter struct {
	PrintAllInListNotationStub        func([]datamodels.Node) string
	printAllInListNotationMutex       sync.RWMutex
	printAllInListNotationArgsForCall []struct {
		arg1 []datamodels.Node
	}
	printAllInListNotationReturns struct {
		result1 string
	}
	printAllInListNotationReturnsOnCall map[int]struct {
		result1 string
	}
	PrintInListNotationStub        func(datamodels.Node) string
	printInListNotationMutex       sync.RWMutex
	printInListNotationArgsForCall []struct {
		arg1 datamodels.Node
	}
	printInListNotationReturns struct {
		result1 string
	}
	printInListNotationReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeListNotationPrinter) PrintAllInListNotation(arg1 []datamodels.Node) string {
	var arg1Copy []datamodels.Node
	if arg1 != nil {
		arg1Copy = make([]datamodels.Node, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.printAllInListNotationMutex.Lock()
	ret, specificReturn := fake.printAllInListNotationReturnsOnCall[len(fake.printAllInListNotationArgsForCall)]
	fake.printAllInListNotationArgsForCall = append(fake.printAllInListNotationArgsForCall, struct {
		arg1 []datamodels.Node
	}{arg1Copy})
	stub := fake.PrintAllInListNotationStub
	fakeReturns := fake.printAllInListNotationReturns
	fake.recordInvocation("PrintAllInListNotation", []interface{}{arg1Copy})
	fake.printAllInListNotationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeListNotationPrinter) PrintAllInListNotationCallCount() int {
	fake.printAllInListNotationMutex.RLock()
	defer fake.printAllInListNotationMutex.RUnlock()
	return len(fake.printAllInListNotationArgsForCall)
}

func (fake *FakeListNotationPrinter) PrintAllInListNotationCalls(stub func([]datamodels.Node) string) {
	fake.printAllInListNotationMutex.Lock()
	defer fake.printAllInListNotationMutex.Unlock()
	fake.PrintAllInListNotationStub = stub
}

func (fake *FakeListNotationPrinter) PrintAllInListNotationArgsForCall(i int) []datamodels.Node {
	fake.printAllInListNotationMutex.RLock()
	defer fake.printAllInListNotationMutex.RUnlock()
	argsForCall := fake.printAllInListNotationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeListNotationPrinter) PrintAllInListNotationReturns(result1 string) {
	fake.printAllInListNotationMutex.Lock()
	defer fake.printAllInListNotationMutex.Unlock()
	fake.PrintAllInListNotationStub = nil
	fake.printAllInListNotationReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeListNotationPrinter) PrintAllInListNotationReturnsOnCall(i int, result1 string) {
	fake.printAllInListNotationMutex.Lock()
	defer fake.printAllInListNotationMutex.Unlock()
	fake.PrintAllInListNotationStub = nil
	if fake.printAllInListNotationReturnsOnCall == nil {
		fake.printAllInListNotationReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.printAllInListNotationReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeListNotationPrinter) PrintInListNotation(arg1 datamodels.Node) string {
	fake.printInListNotationMutex.Lock()
	ret, specificReturn := fake.printInListNotationReturnsOnCall[len(fake.printInListNotationArgsForCall)]
	fake.printInListNotationArgsForCall = append(fake.printInListNotationArgsForCall, struct {
		arg1 datamodels.Node
	}{arg1})
	stub := fake.PrintInListNotationStub
	fakeReturns := fake.printInListNotationReturns
	fake.recordInvocation("PrintInListNotation", []interface{}{arg1})
	fake.printInListNotationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeListNotationPrinter) PrintInListNotationCallCount() int {
	fake.printInListNotationMutex.RLock()
	defer fake.printInListNotationMutex.RUnlock()
	return len(fake.printInListNotationArgsForCall)
}

func (fake *FakeListNotationPrinter) PrintInListNotationCalls(stub func(datamodels.Node) string) {
	fake.printInListNotationMutex.Lock()
	defer fake.printInListNotationMutex.Unlock()
	fake.PrintInListNotationStub = stub
}

func (fake *FakeListNotationPrinter) PrintInListNotationArgsForCall(i int) datamodels.Node {
	fake.printInListNotationMutex.RLock()
	defer fake.printInListNotationMutex.RUnlock()
	argsForCall := fake.printInListNotationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeListNotationPrinter) PrintInListNotationReturns(result1 string) {
	fake.printInListNotationMutex.Lock()
	defer fake.printInListNotationMutex.Unlock()
	fake.PrintInListNotationStub = nil
	fake.printInListNotationReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeListNotationPrinter) PrintInListNotationReturnsOnCall(i int, result1 string) {
	fake.printInListNotationMutex.Lock()
	defer fake.printInListNotationMutex.Unlock()
	fake.PrintInListNotationStub = nil
	if fake.printInListNotationReturnsOnCall == nil {
		fake.printInListNotationReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.printInListNotationReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeListNotationPrinter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.printAllInListNotationMutex.RLock()
	defer fake.printAllInListNotationMutex.RUnlock()
	fake.printInListNotationMutex.RLock()
	defer fake.printInListNotationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeListNotationPrinter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.ListNotationPrinter = new(FakeListNotationPrinter)
