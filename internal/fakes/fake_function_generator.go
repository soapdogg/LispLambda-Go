// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal"
	"lisp_lambda-go/internal/core/datamodels"
	"sync"
)

type FakeFunctionGenerator struct {
	GenerateFunctionStub        func(datamodels.ExpressionListNode) (datamodels.DefunFunction, error)
	generateFunctionMutex       sync.RWMutex
	generateFunctionArgsForCall []struct {
		arg1 datamodels.ExpressionListNode
	}
	generateFunctionReturns struct {
		result1 datamodels.DefunFunction
		result2 error
	}
	generateFunctionReturnsOnCall map[int]struct {
		result1 datamodels.DefunFunction
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFunctionGenerator) GenerateFunction(arg1 datamodels.ExpressionListNode) (datamodels.DefunFunction, error) {
	fake.generateFunctionMutex.Lock()
	ret, specificReturn := fake.generateFunctionReturnsOnCall[len(fake.generateFunctionArgsForCall)]
	fake.generateFunctionArgsForCall = append(fake.generateFunctionArgsForCall, struct {
		arg1 datamodels.ExpressionListNode
	}{arg1})
	stub := fake.GenerateFunctionStub
	fakeReturns := fake.generateFunctionReturns
	fake.recordInvocation("GenerateFunction", []interface{}{arg1})
	fake.generateFunctionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFunctionGenerator) GenerateFunctionCallCount() int {
	fake.generateFunctionMutex.RLock()
	defer fake.generateFunctionMutex.RUnlock()
	return len(fake.generateFunctionArgsForCall)
}

func (fake *FakeFunctionGenerator) GenerateFunctionCalls(stub func(datamodels.ExpressionListNode) (datamodels.DefunFunction, error)) {
	fake.generateFunctionMutex.Lock()
	defer fake.generateFunctionMutex.Unlock()
	fake.GenerateFunctionStub = stub
}

func (fake *FakeFunctionGenerator) GenerateFunctionArgsForCall(i int) datamodels.ExpressionListNode {
	fake.generateFunctionMutex.RLock()
	defer fake.generateFunctionMutex.RUnlock()
	argsForCall := fake.generateFunctionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFunctionGenerator) GenerateFunctionReturns(result1 datamodels.DefunFunction, result2 error) {
	fake.generateFunctionMutex.Lock()
	defer fake.generateFunctionMutex.Unlock()
	fake.GenerateFunctionStub = nil
	fake.generateFunctionReturns = struct {
		result1 datamodels.DefunFunction
		result2 error
	}{result1, result2}
}

func (fake *FakeFunctionGenerator) GenerateFunctionReturnsOnCall(i int, result1 datamodels.DefunFunction, result2 error) {
	fake.generateFunctionMutex.Lock()
	defer fake.generateFunctionMutex.Unlock()
	fake.GenerateFunctionStub = nil
	if fake.generateFunctionReturnsOnCall == nil {
		fake.generateFunctionReturnsOnCall = make(map[int]struct {
			result1 datamodels.DefunFunction
			result2 error
		})
	}
	fake.generateFunctionReturnsOnCall[i] = struct {
		result1 datamodels.DefunFunction
		result2 error
	}{result1, result2}
}

func (fake *FakeFunctionGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateFunctionMutex.RLock()
	defer fake.generateFunctionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFunctionGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.FunctionGenerator = new(FakeFunctionGenerator)
