// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"sync"
)

type FakeDefunFunction struct {
	GetBodyStub        func() datamodels.Node
	getBodyMutex       sync.RWMutex
	getBodyArgsForCall []struct {
	}
	getBodyReturns struct {
		result1 datamodels.Node
	}
	getBodyReturnsOnCall map[int]struct {
		result1 datamodels.Node
	}
	GetFormalParametersStub        func() []string
	getFormalParametersMutex       sync.RWMutex
	getFormalParametersArgsForCall []struct {
	}
	getFormalParametersReturns struct {
		result1 []string
	}
	getFormalParametersReturnsOnCall map[int]struct {
		result1 []string
	}
	GetFunctionNameStub        func() string
	getFunctionNameMutex       sync.RWMutex
	getFunctionNameArgsForCall []struct {
	}
	getFunctionNameReturns struct {
		result1 string
	}
	getFunctionNameReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDefunFunction) GetBody() datamodels.Node {
	fake.getBodyMutex.Lock()
	ret, specificReturn := fake.getBodyReturnsOnCall[len(fake.getBodyArgsForCall)]
	fake.getBodyArgsForCall = append(fake.getBodyArgsForCall, struct {
	}{})
	stub := fake.GetBodyStub
	fakeReturns := fake.getBodyReturns
	fake.recordInvocation("GetBody", []interface{}{})
	fake.getBodyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDefunFunction) GetBodyCallCount() int {
	fake.getBodyMutex.RLock()
	defer fake.getBodyMutex.RUnlock()
	return len(fake.getBodyArgsForCall)
}

func (fake *FakeDefunFunction) GetBodyCalls(stub func() datamodels.Node) {
	fake.getBodyMutex.Lock()
	defer fake.getBodyMutex.Unlock()
	fake.GetBodyStub = stub
}

func (fake *FakeDefunFunction) GetBodyReturns(result1 datamodels.Node) {
	fake.getBodyMutex.Lock()
	defer fake.getBodyMutex.Unlock()
	fake.GetBodyStub = nil
	fake.getBodyReturns = struct {
		result1 datamodels.Node
	}{result1}
}

func (fake *FakeDefunFunction) GetBodyReturnsOnCall(i int, result1 datamodels.Node) {
	fake.getBodyMutex.Lock()
	defer fake.getBodyMutex.Unlock()
	fake.GetBodyStub = nil
	if fake.getBodyReturnsOnCall == nil {
		fake.getBodyReturnsOnCall = make(map[int]struct {
			result1 datamodels.Node
		})
	}
	fake.getBodyReturnsOnCall[i] = struct {
		result1 datamodels.Node
	}{result1}
}

func (fake *FakeDefunFunction) GetFormalParameters() []string {
	fake.getFormalParametersMutex.Lock()
	ret, specificReturn := fake.getFormalParametersReturnsOnCall[len(fake.getFormalParametersArgsForCall)]
	fake.getFormalParametersArgsForCall = append(fake.getFormalParametersArgsForCall, struct {
	}{})
	stub := fake.GetFormalParametersStub
	fakeReturns := fake.getFormalParametersReturns
	fake.recordInvocation("GetFormalParameters", []interface{}{})
	fake.getFormalParametersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDefunFunction) GetFormalParametersCallCount() int {
	fake.getFormalParametersMutex.RLock()
	defer fake.getFormalParametersMutex.RUnlock()
	return len(fake.getFormalParametersArgsForCall)
}

func (fake *FakeDefunFunction) GetFormalParametersCalls(stub func() []string) {
	fake.getFormalParametersMutex.Lock()
	defer fake.getFormalParametersMutex.Unlock()
	fake.GetFormalParametersStub = stub
}

func (fake *FakeDefunFunction) GetFormalParametersReturns(result1 []string) {
	fake.getFormalParametersMutex.Lock()
	defer fake.getFormalParametersMutex.Unlock()
	fake.GetFormalParametersStub = nil
	fake.getFormalParametersReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeDefunFunction) GetFormalParametersReturnsOnCall(i int, result1 []string) {
	fake.getFormalParametersMutex.Lock()
	defer fake.getFormalParametersMutex.Unlock()
	fake.GetFormalParametersStub = nil
	if fake.getFormalParametersReturnsOnCall == nil {
		fake.getFormalParametersReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getFormalParametersReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeDefunFunction) GetFunctionName() string {
	fake.getFunctionNameMutex.Lock()
	ret, specificReturn := fake.getFunctionNameReturnsOnCall[len(fake.getFunctionNameArgsForCall)]
	fake.getFunctionNameArgsForCall = append(fake.getFunctionNameArgsForCall, struct {
	}{})
	stub := fake.GetFunctionNameStub
	fakeReturns := fake.getFunctionNameReturns
	fake.recordInvocation("GetFunctionName", []interface{}{})
	fake.getFunctionNameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDefunFunction) GetFunctionNameCallCount() int {
	fake.getFunctionNameMutex.RLock()
	defer fake.getFunctionNameMutex.RUnlock()
	return len(fake.getFunctionNameArgsForCall)
}

func (fake *FakeDefunFunction) GetFunctionNameCalls(stub func() string) {
	fake.getFunctionNameMutex.Lock()
	defer fake.getFunctionNameMutex.Unlock()
	fake.GetFunctionNameStub = stub
}

func (fake *FakeDefunFunction) GetFunctionNameReturns(result1 string) {
	fake.getFunctionNameMutex.Lock()
	defer fake.getFunctionNameMutex.Unlock()
	fake.GetFunctionNameStub = nil
	fake.getFunctionNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDefunFunction) GetFunctionNameReturnsOnCall(i int, result1 string) {
	fake.getFunctionNameMutex.Lock()
	defer fake.getFunctionNameMutex.Unlock()
	fake.GetFunctionNameStub = nil
	if fake.getFunctionNameReturnsOnCall == nil {
		fake.getFunctionNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getFunctionNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDefunFunction) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBodyMutex.RLock()
	defer fake.getBodyMutex.RUnlock()
	fake.getFormalParametersMutex.RLock()
	defer fake.getFormalParametersMutex.RUnlock()
	fake.getFunctionNameMutex.RLock()
	defer fake.getFunctionNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDefunFunction) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ datamodels.DefunFunction = new(FakeDefunFunction)
