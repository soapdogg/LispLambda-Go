// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"sync"
)

type FakePartitionedRootNodes struct {
	GetDefunNodesStub        func() []datamodels.ExpressionListNode
	getDefunNodesMutex       sync.RWMutex
	getDefunNodesArgsForCall []struct {
	}
	getDefunNodesReturns struct {
		result1 []datamodels.ExpressionListNode
	}
	getDefunNodesReturnsOnCall map[int]struct {
		result1 []datamodels.ExpressionListNode
	}
	GetEvaluatableNodesStub        func() []datamodels.Node
	getEvaluatableNodesMutex       sync.RWMutex
	getEvaluatableNodesArgsForCall []struct {
	}
	getEvaluatableNodesReturns struct {
		result1 []datamodels.Node
	}
	getEvaluatableNodesReturnsOnCall map[int]struct {
		result1 []datamodels.Node
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePartitionedRootNodes) GetDefunNodes() []datamodels.ExpressionListNode {
	fake.getDefunNodesMutex.Lock()
	ret, specificReturn := fake.getDefunNodesReturnsOnCall[len(fake.getDefunNodesArgsForCall)]
	fake.getDefunNodesArgsForCall = append(fake.getDefunNodesArgsForCall, struct {
	}{})
	stub := fake.GetDefunNodesStub
	fakeReturns := fake.getDefunNodesReturns
	fake.recordInvocation("GetDefunNodes", []interface{}{})
	fake.getDefunNodesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePartitionedRootNodes) GetDefunNodesCallCount() int {
	fake.getDefunNodesMutex.RLock()
	defer fake.getDefunNodesMutex.RUnlock()
	return len(fake.getDefunNodesArgsForCall)
}

func (fake *FakePartitionedRootNodes) GetDefunNodesCalls(stub func() []datamodels.ExpressionListNode) {
	fake.getDefunNodesMutex.Lock()
	defer fake.getDefunNodesMutex.Unlock()
	fake.GetDefunNodesStub = stub
}

func (fake *FakePartitionedRootNodes) GetDefunNodesReturns(result1 []datamodels.ExpressionListNode) {
	fake.getDefunNodesMutex.Lock()
	defer fake.getDefunNodesMutex.Unlock()
	fake.GetDefunNodesStub = nil
	fake.getDefunNodesReturns = struct {
		result1 []datamodels.ExpressionListNode
	}{result1}
}

func (fake *FakePartitionedRootNodes) GetDefunNodesReturnsOnCall(i int, result1 []datamodels.ExpressionListNode) {
	fake.getDefunNodesMutex.Lock()
	defer fake.getDefunNodesMutex.Unlock()
	fake.GetDefunNodesStub = nil
	if fake.getDefunNodesReturnsOnCall == nil {
		fake.getDefunNodesReturnsOnCall = make(map[int]struct {
			result1 []datamodels.ExpressionListNode
		})
	}
	fake.getDefunNodesReturnsOnCall[i] = struct {
		result1 []datamodels.ExpressionListNode
	}{result1}
}

func (fake *FakePartitionedRootNodes) GetEvaluatableNodes() []datamodels.Node {
	fake.getEvaluatableNodesMutex.Lock()
	ret, specificReturn := fake.getEvaluatableNodesReturnsOnCall[len(fake.getEvaluatableNodesArgsForCall)]
	fake.getEvaluatableNodesArgsForCall = append(fake.getEvaluatableNodesArgsForCall, struct {
	}{})
	stub := fake.GetEvaluatableNodesStub
	fakeReturns := fake.getEvaluatableNodesReturns
	fake.recordInvocation("GetEvaluatableNodes", []interface{}{})
	fake.getEvaluatableNodesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePartitionedRootNodes) GetEvaluatableNodesCallCount() int {
	fake.getEvaluatableNodesMutex.RLock()
	defer fake.getEvaluatableNodesMutex.RUnlock()
	return len(fake.getEvaluatableNodesArgsForCall)
}

func (fake *FakePartitionedRootNodes) GetEvaluatableNodesCalls(stub func() []datamodels.Node) {
	fake.getEvaluatableNodesMutex.Lock()
	defer fake.getEvaluatableNodesMutex.Unlock()
	fake.GetEvaluatableNodesStub = stub
}

func (fake *FakePartitionedRootNodes) GetEvaluatableNodesReturns(result1 []datamodels.Node) {
	fake.getEvaluatableNodesMutex.Lock()
	defer fake.getEvaluatableNodesMutex.Unlock()
	fake.GetEvaluatableNodesStub = nil
	fake.getEvaluatableNodesReturns = struct {
		result1 []datamodels.Node
	}{result1}
}

func (fake *FakePartitionedRootNodes) GetEvaluatableNodesReturnsOnCall(i int, result1 []datamodels.Node) {
	fake.getEvaluatableNodesMutex.Lock()
	defer fake.getEvaluatableNodesMutex.Unlock()
	fake.GetEvaluatableNodesStub = nil
	if fake.getEvaluatableNodesReturnsOnCall == nil {
		fake.getEvaluatableNodesReturnsOnCall = make(map[int]struct {
			result1 []datamodels.Node
		})
	}
	fake.getEvaluatableNodesReturnsOnCall[i] = struct {
		result1 []datamodels.Node
	}{result1}
}

func (fake *FakePartitionedRootNodes) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDefunNodesMutex.RLock()
	defer fake.getDefunNodesMutex.RUnlock()
	fake.getEvaluatableNodesMutex.RLock()
	defer fake.getEvaluatableNodesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePartitionedRootNodes) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ datamodels.PartitionedRootNodes = new(FakePartitionedRootNodes)
