// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"sync"
)

type FakeProgramItem struct {
	GetCurrentParameterIndexStub        func() int
	getCurrentParameterIndexMutex       sync.RWMutex
	getCurrentParameterIndexArgsForCall []struct {
	}
	getCurrentParameterIndexReturns struct {
		result1 int
	}
	getCurrentParameterIndexReturnsOnCall map[int]struct {
		result1 int
	}
	GetFunctionExpressionNodeStub        func() datamodels.ExpressionListNode
	getFunctionExpressionNodeMutex       sync.RWMutex
	getFunctionExpressionNodeArgsForCall []struct {
	}
	getFunctionExpressionNodeReturns struct {
		result1 datamodels.ExpressionListNode
	}
	getFunctionExpressionNodeReturnsOnCall map[int]struct {
		result1 datamodels.ExpressionListNode
	}
	GetFunctionNameStub        func() string
	getFunctionNameMutex       sync.RWMutex
	getFunctionNameArgsForCall []struct {
	}
	getFunctionNameReturns struct {
		result1 string
	}
	getFunctionNameReturnsOnCall map[int]struct {
		result1 string
	}
	GetVariableMapStub        func() map[string]datamodels.Node
	getVariableMapMutex       sync.RWMutex
	getVariableMapArgsForCall []struct {
	}
	getVariableMapReturns struct {
		result1 map[string]datamodels.Node
	}
	getVariableMapReturnsOnCall map[int]struct {
		result1 map[string]datamodels.Node
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProgramItem) GetCurrentParameterIndex() int {
	fake.getCurrentParameterIndexMutex.Lock()
	ret, specificReturn := fake.getCurrentParameterIndexReturnsOnCall[len(fake.getCurrentParameterIndexArgsForCall)]
	fake.getCurrentParameterIndexArgsForCall = append(fake.getCurrentParameterIndexArgsForCall, struct {
	}{})
	stub := fake.GetCurrentParameterIndexStub
	fakeReturns := fake.getCurrentParameterIndexReturns
	fake.recordInvocation("GetCurrentParameterIndex", []interface{}{})
	fake.getCurrentParameterIndexMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProgramItem) GetCurrentParameterIndexCallCount() int {
	fake.getCurrentParameterIndexMutex.RLock()
	defer fake.getCurrentParameterIndexMutex.RUnlock()
	return len(fake.getCurrentParameterIndexArgsForCall)
}

func (fake *FakeProgramItem) GetCurrentParameterIndexCalls(stub func() int) {
	fake.getCurrentParameterIndexMutex.Lock()
	defer fake.getCurrentParameterIndexMutex.Unlock()
	fake.GetCurrentParameterIndexStub = stub
}

func (fake *FakeProgramItem) GetCurrentParameterIndexReturns(result1 int) {
	fake.getCurrentParameterIndexMutex.Lock()
	defer fake.getCurrentParameterIndexMutex.Unlock()
	fake.GetCurrentParameterIndexStub = nil
	fake.getCurrentParameterIndexReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeProgramItem) GetCurrentParameterIndexReturnsOnCall(i int, result1 int) {
	fake.getCurrentParameterIndexMutex.Lock()
	defer fake.getCurrentParameterIndexMutex.Unlock()
	fake.GetCurrentParameterIndexStub = nil
	if fake.getCurrentParameterIndexReturnsOnCall == nil {
		fake.getCurrentParameterIndexReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getCurrentParameterIndexReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeProgramItem) GetFunctionExpressionNode() datamodels.ExpressionListNode {
	fake.getFunctionExpressionNodeMutex.Lock()
	ret, specificReturn := fake.getFunctionExpressionNodeReturnsOnCall[len(fake.getFunctionExpressionNodeArgsForCall)]
	fake.getFunctionExpressionNodeArgsForCall = append(fake.getFunctionExpressionNodeArgsForCall, struct {
	}{})
	stub := fake.GetFunctionExpressionNodeStub
	fakeReturns := fake.getFunctionExpressionNodeReturns
	fake.recordInvocation("GetFunctionExpressionNode", []interface{}{})
	fake.getFunctionExpressionNodeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProgramItem) GetFunctionExpressionNodeCallCount() int {
	fake.getFunctionExpressionNodeMutex.RLock()
	defer fake.getFunctionExpressionNodeMutex.RUnlock()
	return len(fake.getFunctionExpressionNodeArgsForCall)
}

func (fake *FakeProgramItem) GetFunctionExpressionNodeCalls(stub func() datamodels.ExpressionListNode) {
	fake.getFunctionExpressionNodeMutex.Lock()
	defer fake.getFunctionExpressionNodeMutex.Unlock()
	fake.GetFunctionExpressionNodeStub = stub
}

func (fake *FakeProgramItem) GetFunctionExpressionNodeReturns(result1 datamodels.ExpressionListNode) {
	fake.getFunctionExpressionNodeMutex.Lock()
	defer fake.getFunctionExpressionNodeMutex.Unlock()
	fake.GetFunctionExpressionNodeStub = nil
	fake.getFunctionExpressionNodeReturns = struct {
		result1 datamodels.ExpressionListNode
	}{result1}
}

func (fake *FakeProgramItem) GetFunctionExpressionNodeReturnsOnCall(i int, result1 datamodels.ExpressionListNode) {
	fake.getFunctionExpressionNodeMutex.Lock()
	defer fake.getFunctionExpressionNodeMutex.Unlock()
	fake.GetFunctionExpressionNodeStub = nil
	if fake.getFunctionExpressionNodeReturnsOnCall == nil {
		fake.getFunctionExpressionNodeReturnsOnCall = make(map[int]struct {
			result1 datamodels.ExpressionListNode
		})
	}
	fake.getFunctionExpressionNodeReturnsOnCall[i] = struct {
		result1 datamodels.ExpressionListNode
	}{result1}
}

func (fake *FakeProgramItem) GetFunctionName() string {
	fake.getFunctionNameMutex.Lock()
	ret, specificReturn := fake.getFunctionNameReturnsOnCall[len(fake.getFunctionNameArgsForCall)]
	fake.getFunctionNameArgsForCall = append(fake.getFunctionNameArgsForCall, struct {
	}{})
	stub := fake.GetFunctionNameStub
	fakeReturns := fake.getFunctionNameReturns
	fake.recordInvocation("GetFunctionName", []interface{}{})
	fake.getFunctionNameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProgramItem) GetFunctionNameCallCount() int {
	fake.getFunctionNameMutex.RLock()
	defer fake.getFunctionNameMutex.RUnlock()
	return len(fake.getFunctionNameArgsForCall)
}

func (fake *FakeProgramItem) GetFunctionNameCalls(stub func() string) {
	fake.getFunctionNameMutex.Lock()
	defer fake.getFunctionNameMutex.Unlock()
	fake.GetFunctionNameStub = stub
}

func (fake *FakeProgramItem) GetFunctionNameReturns(result1 string) {
	fake.getFunctionNameMutex.Lock()
	defer fake.getFunctionNameMutex.Unlock()
	fake.GetFunctionNameStub = nil
	fake.getFunctionNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeProgramItem) GetFunctionNameReturnsOnCall(i int, result1 string) {
	fake.getFunctionNameMutex.Lock()
	defer fake.getFunctionNameMutex.Unlock()
	fake.GetFunctionNameStub = nil
	if fake.getFunctionNameReturnsOnCall == nil {
		fake.getFunctionNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getFunctionNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeProgramItem) GetVariableMap() map[string]datamodels.Node {
	fake.getVariableMapMutex.Lock()
	ret, specificReturn := fake.getVariableMapReturnsOnCall[len(fake.getVariableMapArgsForCall)]
	fake.getVariableMapArgsForCall = append(fake.getVariableMapArgsForCall, struct {
	}{})
	stub := fake.GetVariableMapStub
	fakeReturns := fake.getVariableMapReturns
	fake.recordInvocation("GetVariableMap", []interface{}{})
	fake.getVariableMapMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProgramItem) GetVariableMapCallCount() int {
	fake.getVariableMapMutex.RLock()
	defer fake.getVariableMapMutex.RUnlock()
	return len(fake.getVariableMapArgsForCall)
}

func (fake *FakeProgramItem) GetVariableMapCalls(stub func() map[string]datamodels.Node) {
	fake.getVariableMapMutex.Lock()
	defer fake.getVariableMapMutex.Unlock()
	fake.GetVariableMapStub = stub
}

func (fake *FakeProgramItem) GetVariableMapReturns(result1 map[string]datamodels.Node) {
	fake.getVariableMapMutex.Lock()
	defer fake.getVariableMapMutex.Unlock()
	fake.GetVariableMapStub = nil
	fake.getVariableMapReturns = struct {
		result1 map[string]datamodels.Node
	}{result1}
}

func (fake *FakeProgramItem) GetVariableMapReturnsOnCall(i int, result1 map[string]datamodels.Node) {
	fake.getVariableMapMutex.Lock()
	defer fake.getVariableMapMutex.Unlock()
	fake.GetVariableMapStub = nil
	if fake.getVariableMapReturnsOnCall == nil {
		fake.getVariableMapReturnsOnCall = make(map[int]struct {
			result1 map[string]datamodels.Node
		})
	}
	fake.getVariableMapReturnsOnCall[i] = struct {
		result1 map[string]datamodels.Node
	}{result1}
}

func (fake *FakeProgramItem) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCurrentParameterIndexMutex.RLock()
	defer fake.getCurrentParameterIndexMutex.RUnlock()
	fake.getFunctionExpressionNodeMutex.RLock()
	defer fake.getFunctionExpressionNodeMutex.RUnlock()
	fake.getFunctionNameMutex.RLock()
	defer fake.getFunctionNameMutex.RUnlock()
	fake.getVariableMapMutex.RLock()
	defer fake.getVariableMapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProgramItem) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ datamodels.ProgramItem = new(FakeProgramItem)
