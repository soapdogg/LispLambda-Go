// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"sync"
)

type FakeExpressionListNode struct {
	GetChildrenStub        func() []datamodels.Node
	getChildrenMutex       sync.RWMutex
	getChildrenArgsForCall []struct {
	}
	getChildrenReturns struct {
		result1 []datamodels.Node
	}
	getChildrenReturnsOnCall map[int]struct {
		result1 []datamodels.Node
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExpressionListNode) GetChildren() []datamodels.Node {
	fake.getChildrenMutex.Lock()
	ret, specificReturn := fake.getChildrenReturnsOnCall[len(fake.getChildrenArgsForCall)]
	fake.getChildrenArgsForCall = append(fake.getChildrenArgsForCall, struct {
	}{})
	stub := fake.GetChildrenStub
	fakeReturns := fake.getChildrenReturns
	fake.recordInvocation("GetChildren", []interface{}{})
	fake.getChildrenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExpressionListNode) GetChildrenCallCount() int {
	fake.getChildrenMutex.RLock()
	defer fake.getChildrenMutex.RUnlock()
	return len(fake.getChildrenArgsForCall)
}

func (fake *FakeExpressionListNode) GetChildrenCalls(stub func() []datamodels.Node) {
	fake.getChildrenMutex.Lock()
	defer fake.getChildrenMutex.Unlock()
	fake.GetChildrenStub = stub
}

func (fake *FakeExpressionListNode) GetChildrenReturns(result1 []datamodels.Node) {
	fake.getChildrenMutex.Lock()
	defer fake.getChildrenMutex.Unlock()
	fake.GetChildrenStub = nil
	fake.getChildrenReturns = struct {
		result1 []datamodels.Node
	}{result1}
}

func (fake *FakeExpressionListNode) GetChildrenReturnsOnCall(i int, result1 []datamodels.Node) {
	fake.getChildrenMutex.Lock()
	defer fake.getChildrenMutex.Unlock()
	fake.GetChildrenStub = nil
	if fake.getChildrenReturnsOnCall == nil {
		fake.getChildrenReturnsOnCall = make(map[int]struct {
			result1 []datamodels.Node
		})
	}
	fake.getChildrenReturnsOnCall[i] = struct {
		result1 []datamodels.Node
	}{result1}
}

func (fake *FakeExpressionListNode) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getChildrenMutex.RLock()
	defer fake.getChildrenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExpressionListNode) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ datamodels.ExpressionListNode = new(FakeExpressionListNode)
