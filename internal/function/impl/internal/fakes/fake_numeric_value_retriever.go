// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/core/datamodels"
	"lisp_lambda-go/internal/function/impl/internal"
	"sync"
)

type FakeNumericValueRetriever struct {
	RetrieveNumericValueStub        func(datamodels.Node, string, int) (int, error)
	retrieveNumericValueMutex       sync.RWMutex
	retrieveNumericValueArgsForCall []struct {
		arg1 datamodels.Node
		arg2 string
		arg3 int
	}
	retrieveNumericValueReturns struct {
		result1 int
		result2 error
	}
	retrieveNumericValueReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNumericValueRetriever) RetrieveNumericValue(arg1 datamodels.Node, arg2 string, arg3 int) (int, error) {
	fake.retrieveNumericValueMutex.Lock()
	ret, specificReturn := fake.retrieveNumericValueReturnsOnCall[len(fake.retrieveNumericValueArgsForCall)]
	fake.retrieveNumericValueArgsForCall = append(fake.retrieveNumericValueArgsForCall, struct {
		arg1 datamodels.Node
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.RetrieveNumericValueStub
	fakeReturns := fake.retrieveNumericValueReturns
	fake.recordInvocation("RetrieveNumericValue", []interface{}{arg1, arg2, arg3})
	fake.retrieveNumericValueMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNumericValueRetriever) RetrieveNumericValueCallCount() int {
	fake.retrieveNumericValueMutex.RLock()
	defer fake.retrieveNumericValueMutex.RUnlock()
	return len(fake.retrieveNumericValueArgsForCall)
}

func (fake *FakeNumericValueRetriever) RetrieveNumericValueCalls(stub func(datamodels.Node, string, int) (int, error)) {
	fake.retrieveNumericValueMutex.Lock()
	defer fake.retrieveNumericValueMutex.Unlock()
	fake.RetrieveNumericValueStub = stub
}

func (fake *FakeNumericValueRetriever) RetrieveNumericValueArgsForCall(i int) (datamodels.Node, string, int) {
	fake.retrieveNumericValueMutex.RLock()
	defer fake.retrieveNumericValueMutex.RUnlock()
	argsForCall := fake.retrieveNumericValueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNumericValueRetriever) RetrieveNumericValueReturns(result1 int, result2 error) {
	fake.retrieveNumericValueMutex.Lock()
	defer fake.retrieveNumericValueMutex.Unlock()
	fake.RetrieveNumericValueStub = nil
	fake.retrieveNumericValueReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeNumericValueRetriever) RetrieveNumericValueReturnsOnCall(i int, result1 int, result2 error) {
	fake.retrieveNumericValueMutex.Lock()
	defer fake.retrieveNumericValueMutex.Unlock()
	fake.RetrieveNumericValueStub = nil
	if fake.retrieveNumericValueReturnsOnCall == nil {
		fake.retrieveNumericValueReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.retrieveNumericValueReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeNumericValueRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.retrieveNumericValueMutex.RLock()
	defer fake.retrieveNumericValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNumericValueRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.NumericValueRetriever = new(FakeNumericValueRetriever)
