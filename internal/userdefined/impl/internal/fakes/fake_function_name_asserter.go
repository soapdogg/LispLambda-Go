// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"lisp_lambda-go/internal/userdefined/impl/internal"
	"sync"
)

type FakeFunctionNameAsserter struct {
	AssertFunctionNameIsValidStub        func(string) error
	assertFunctionNameIsValidMutex       sync.RWMutex
	assertFunctionNameIsValidArgsForCall []struct {
		arg1 string
	}
	assertFunctionNameIsValidReturns struct {
		result1 error
	}
	assertFunctionNameIsValidReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFunctionNameAsserter) AssertFunctionNameIsValid(arg1 string) error {
	fake.assertFunctionNameIsValidMutex.Lock()
	ret, specificReturn := fake.assertFunctionNameIsValidReturnsOnCall[len(fake.assertFunctionNameIsValidArgsForCall)]
	fake.assertFunctionNameIsValidArgsForCall = append(fake.assertFunctionNameIsValidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.AssertFunctionNameIsValidStub
	fakeReturns := fake.assertFunctionNameIsValidReturns
	fake.recordInvocation("AssertFunctionNameIsValid", []interface{}{arg1})
	fake.assertFunctionNameIsValidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFunctionNameAsserter) AssertFunctionNameIsValidCallCount() int {
	fake.assertFunctionNameIsValidMutex.RLock()
	defer fake.assertFunctionNameIsValidMutex.RUnlock()
	return len(fake.assertFunctionNameIsValidArgsForCall)
}

func (fake *FakeFunctionNameAsserter) AssertFunctionNameIsValidCalls(stub func(string) error) {
	fake.assertFunctionNameIsValidMutex.Lock()
	defer fake.assertFunctionNameIsValidMutex.Unlock()
	fake.AssertFunctionNameIsValidStub = stub
}

func (fake *FakeFunctionNameAsserter) AssertFunctionNameIsValidArgsForCall(i int) string {
	fake.assertFunctionNameIsValidMutex.RLock()
	defer fake.assertFunctionNameIsValidMutex.RUnlock()
	argsForCall := fake.assertFunctionNameIsValidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFunctionNameAsserter) AssertFunctionNameIsValidReturns(result1 error) {
	fake.assertFunctionNameIsValidMutex.Lock()
	defer fake.assertFunctionNameIsValidMutex.Unlock()
	fake.AssertFunctionNameIsValidStub = nil
	fake.assertFunctionNameIsValidReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFunctionNameAsserter) AssertFunctionNameIsValidReturnsOnCall(i int, result1 error) {
	fake.assertFunctionNameIsValidMutex.Lock()
	defer fake.assertFunctionNameIsValidMutex.Unlock()
	fake.AssertFunctionNameIsValidStub = nil
	if fake.assertFunctionNameIsValidReturnsOnCall == nil {
		fake.assertFunctionNameIsValidReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assertFunctionNameIsValidReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFunctionNameAsserter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assertFunctionNameIsValidMutex.RLock()
	defer fake.assertFunctionNameIsValidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFunctionNameAsserter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.FunctionNameAsserter = new(FakeFunctionNameAsserter)
